#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import urllib
import urllib2
import re
from collections import OrderedDict

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "password_hash_finder"
INFO['DESCRIPTION'] = "MD5, SHA-256, SHA1 Online Hash Crack"
INFO['VENDOR'] = "https://github.com/UltimateHackers/Hash-Buster"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['']
INFO["CVE Name"] = ''
INFO["NOTES"] = """This tool used several online hash crackers to find cleartext of a hash in less than 5 seconds.
"""

INFO['CHANGELOG'] = "27 Nov, 2017. Written by East team"
INFO['PATH'] = 'Tools/'

OPTIONS = OrderedDict()
OPTIONS['HASH'] = '5f4dcc3b5aa765d61d8327deb882cf99'

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.hash = OPTIONS['HASH']
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.hash = self.args.get('HASH', self.hash)
    
    def sha256(self):
        url = 'http://md5decrypt.net/Api/api.php?hash={}&hash_type=sha256&email=deanna_abshire@proxymail.eu&code=1152464b80a61728'.format(self.hash)
        
        try:
            fd = urllib2.urlopen(url)
            html = fd.read()
            
            if len(html) > 0:
                return html
        except Exception as e:
            self.log(e)
            
        return None
    
    def sha1(self):
        url = 'http://hashcrack.com/index.php'
        data = {"auth":"8272hgt", 
                "hash":self.hash, 
                "string":"",
                "Submit":"Submit"
        }
        
        try:
            fd = urllib2.urlopen(url, urllib.urlencode(data))
            html = fd.read()
            
            result = re.search(r'<span class=hervorheb2>[^<]*</span></div></TD>', html)
            if result:
                return result.group().split('hervorheb2>')[1][:-18]
        except Exception as e:
            self.log(e)
            
        return None
    
    def md5_a(self):
        url = 'http://md5decryption.com'
        data = {"hash":self.hash, "submit":"Decrypt It!"}
        
        try:
            fd = urllib2.urlopen(url, urllib.urlencode(data))
            html = fd.read()
            
            result = re.search(r'Decrypted Text: </b>[^<]*</font>', html)
            if result:
                return result.group().split('b>')[1][:-7]
        except Exception as e:
            self.log(e)
            
        return None
    
    def md5_b(self):
        url = 'http://md5.my-addr.com/md5_decrypt-md5_cracker_online/md5_decoder_tool.php'
        data = {"md5":self.hash, "x":"21", "y":"8"}
        
        try:
            fd = urllib2.urlopen(url, urllib.urlencode(data))
            html = fd.read()
            
            result = re.search(r"<span class='middle_title'>Hashed string</span>: [^<]*</div>", html)
            if result:
                return result.group().split('span')[2][3:-6]
        except Exception as e:
            self.log(e)
            
        return None
    
    def md5_c(self):
        url = 'http://www.nitrxgen.net/md5db/'
        
        try:
            fd = urllib2.urlopen(url + self.hash)
            html = fd.read()
            
            if len(html) > 0:
                return html
        except Exception as e:
            self.log(e)
            
        return None
    
    def run(self):
        self.args()
        self.log('Your hash: ' + self.hash)
        
        if len(self.hash) == 32:
            self.log('It is MD5, right?')
            result = self.md5_a()
            
            if result:
                self.log('Found: ' + result)
                self.finish(True)
                
            result = self.md5_b()
            
            if result:
                self.log('Found: ' + result)
                self.finish(True)
                
            result = self.md5_c()
            
            if result:
                self.log('Found: ' + result)
                self.finish(True)
                
        elif len(self.hash) == 40:
            self.log('It is SHA1, yes?')
            result = self.sha1()
            
            if result:
                self.log('Found: ' + result)
                self.finish(True)
                
        elif len(self.hash) == 64:
            self.log('Well, it is SHA-256')
            result = self.sha256()
            
            if result:
                self.log('Found: ' + result)
                self.finish(True)
            
        else:
            self.log('Sorry, but only MD5, SHA1 and SHA-256 supported!')
        
        self.log('Not Found!')
        self.finish(False)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
